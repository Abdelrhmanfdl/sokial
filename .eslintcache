[{"E:\\sokial\\sokial\\src\\index.js":"1","E:\\sokial\\sokial\\src\\App.js":"2","E:\\sokial\\sokial\\src\\reportWebVitals.js":"3","E:\\sokial\\sokial\\src\\components\\signup.js":"4","E:\\sokial\\sokial\\src\\components\\login.js":"5","E:\\sokial\\sokial\\src\\components\\profile.js":"6","E:\\sokial\\sokial\\src\\components\\posting.js":"7","E:\\sokial\\sokial\\src\\components\\post.js":"8","E:\\sokial\\sokial\\src\\components\\postsProfileSection.js":"9","E:\\sokial\\sokial\\src\\components\\profileHeader.js":"10","E:\\sokial\\sokial\\src\\components\\mainBar.js":"11","E:\\sokial\\sokial\\src\\components\\FriendshipNotificationsButton.js":"12","E:\\sokial\\sokial\\src\\components\\friendshipNotificationsButton.js":"13","E:\\sokial\\sokial\\src\\components\\notificationsContainer.js":"14","E:\\sokial\\sokial\\src\\components\\friendshipNotifEntry.js":"15","E:\\sokial\\sokial\\src\\usable functions\\endpoint-related.js":"16","E:\\sokial\\sokial\\src\\components\\postCommentsSection.js":"17","E:\\sokial\\sokial\\src\\usable functions\\general.js":"18","E:\\sokial\\sokial\\src\\components\\postComment.js":"19","E:\\sokial\\sokial\\src\\components\\postEditing.js":"20","E:\\sokial\\sokial\\src\\components\\home.js":"21","E:\\sokial\\sokial\\src\\components\\postsHomeSection.js":"22","E:\\sokial\\sokial\\src\\components\\profileImg.js":"23","E:\\sokial\\sokial\\src\\components\\profilePostsOption.js":"24","E:\\sokial\\sokial\\src\\components\\profileFriendsOption.js":"25","E:\\sokial\\sokial\\src\\components\\friendEntryProfileFriendsOption..js":"26","E:\\sokial\\sokial\\src\\components\\postReactantsModal.js":"27","E:\\sokial\\sokial\\src\\components\\postReactantEntry.js":"28"},{"size":231,"mtime":1611459015441,"results":"29","hashOfConfig":"30"},{"size":3717,"mtime":1617157925505,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"32","hashOfConfig":"30"},{"size":11531,"mtime":1611632160414,"results":"33","hashOfConfig":"30"},{"size":3326,"mtime":1617158173094,"results":"34","hashOfConfig":"30"},{"size":3646,"mtime":1616818017761,"results":"35","hashOfConfig":"30"},{"size":7178,"mtime":1616461419806,"results":"36","hashOfConfig":"30"},{"size":8662,"mtime":1617141968889,"results":"37","hashOfConfig":"30"},{"size":11272,"mtime":1617139302987,"results":"38","hashOfConfig":"30"},{"size":3478,"mtime":1616970050884,"results":"39","hashOfConfig":"30"},{"size":1986,"mtime":1612289921352,"results":"40","hashOfConfig":"30"},{"size":884,"mtime":1611910578522,"results":"41","hashOfConfig":"30"},{"size":5002,"mtime":1612290028624,"results":"42","hashOfConfig":"30"},{"size":248,"mtime":1611924095031,"results":"43","hashOfConfig":"30"},{"size":1399,"mtime":1613440904775,"results":"44","hashOfConfig":"30"},{"size":1375,"mtime":1611999343698,"results":"45","hashOfConfig":"30"},{"size":13103,"mtime":1616730128932,"results":"46","hashOfConfig":"30"},{"size":261,"mtime":1612055288154,"results":"47","hashOfConfig":"30"},{"size":5068,"mtime":1616250728114,"results":"48","hashOfConfig":"30"},{"size":2051,"mtime":1616257067686,"results":"49","hashOfConfig":"30"},{"size":449,"mtime":1617150624905,"results":"50","hashOfConfig":"30"},{"size":10961,"mtime":1617155111199,"results":"51","hashOfConfig":"30"},{"size":3562,"mtime":1616735965132,"results":"52","hashOfConfig":"30"},{"size":3411,"mtime":1617162498320,"results":"53","hashOfConfig":"30"},{"size":2882,"mtime":1613825725022,"results":"54","hashOfConfig":"30"},{"size":2247,"mtime":1613827341863,"results":"55","hashOfConfig":"30"},{"size":4992,"mtime":1616723155539,"results":"56","hashOfConfig":"30"},{"size":2033,"mtime":1616724675098,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"f5302e",{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":1,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"60"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"60"},"E:\\sokial\\sokial\\src\\index.js",[],["134","135"],"E:\\sokial\\sokial\\src\\App.js",["136","137","138","139"],"import \"./App.scss\";\r\nimport Signup from \"./components/signup\";\r\nimport Login from \"./components/login\";\r\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\r\nimport Profile from \"./components/profile\";\r\nimport Home from \"./components/home\";\r\nimport MainBar from \"./components/mainBar\";\r\nimport { Component } from \"react\";\r\n\r\n/////////////////////\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.gotUserData = this.gotUserData.bind(this);\r\n    this.handleLogout = this.handleLogout.bind(this);\r\n\r\n    this.state = {\r\n      identity: null,\r\n      authChecked: false,\r\n      profileImg: null,\r\n    };\r\n  }\r\n\r\n  gotUserData(data) {\r\n    this.setState({ identity: data });\r\n    window.location.replace(\"/home\");\r\n  }\r\n  async handleLogout() {\r\n    await fetch(\"/logout\", {\r\n      method: \"post\",\r\n    });\r\n\r\n    window.location.replace(\"/login\");\r\n    this.setState({ identity: null });\r\n  }\r\n\r\n  componentDidMount() {\r\n    let tmpIdentity;\r\n    fetch(\"/about-auth\", { method: \"GET\" })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        if (res.auth) {\r\n          if (\r\n            window.location.pathname == \"/login\" ||\r\n            window.location.pathname == \"/signup\"\r\n          )\r\n            window.location.replace(\"/home\");\r\n          tmpIdentity = {\r\n            id: res.userData.id,\r\n            firstName: res.userData.first_name,\r\n            lastName: res.userData.last_name,\r\n            profileImagePath: res.userData.profile_image_path,\r\n          };\r\n\r\n          /*\r\n          this.setState({\r\n               identity: {\r\n              id: res.userData.id,\r\n              firstName: res.userData.first_name,\r\n              lastName: res.userData.last_name,\r\n              profileImagePath: res.userData.profile_image_path,\r\n            },\r\n            authChecked: true,\r\n          });*/\r\n\r\n          return fetch(\r\n            `/get-profile-img/${res.userData.id}?` +\r\n              new URLSearchParams({\r\n                profile_image_path: res.userData.profile_image_path,\r\n              })\r\n          );\r\n        } else {\r\n          this.setState({ authChecked: true });\r\n          if (\r\n            window.location.pathname != \"/login\" &&\r\n            window.location.pathname != \"/signup\"\r\n          )\r\n            window.location.replace(\"/login\");\r\n        }\r\n      })\r\n      .then((res) => {\r\n        if (res && res.ok) return res.blob();\r\n      })\r\n      .then((res) => {\r\n        if (res) {\r\n          const img = URL.createObjectURL(res);\r\n          this.setState({\r\n            identity: { ...tmpIdentity, profileImage: img },\r\n            authChecked: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          identity: tmpIdentity,\r\n          authChecked: true,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.authChecked)\r\n      return (\r\n        <Router>\r\n          <MainBar logout={this.handleLogout} identity={this.state.identity} />\r\n          <Switch>\r\n            <Route\r\n              path=\"/login\"\r\n              component={() => <Login gotUserData={this.gotUserData} />}\r\n            />\r\n            <Route\r\n              path=\"/signup\"\r\n              component={() => <Signup gotUserData={this.gotUserData} />}\r\n            />\r\n            <Route\r\n              path=\"/profile\"\r\n              component={() => <Profile identity={this.state.identity} />}\r\n            />\r\n            <Route\r\n              path=\"/home\"\r\n              component={() => <Home identity={this.state.identity} />}\r\n            />\r\n          </Switch>\r\n        </Router>\r\n      );\r\n    else return null;\r\n  }\r\n}\r\nexport default App;\r\n","E:\\sokial\\sokial\\src\\reportWebVitals.js",[],["140","141"],"E:\\sokial\\sokial\\src\\components\\signup.js",["142","143"],"import { useState, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\n\r\n/*\r\nTODO :: Show and handle invalidation of account creation\r\n*/\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { countries } from \"../data-stores/login and signup.json\";\r\n\r\nconst maxNameLen = 20,\r\n  minNameLen = 2,\r\n  maxPassLen = 20,\r\n  minPassLen = 6,\r\n  maxCityLen = 20,\r\n  minCityLen = 2;\r\n\r\nconst validationSchema = yup.object({\r\n  fname: yup\r\n    .string()\r\n    .min(\r\n      minNameLen,\r\n      `First name should be of minimum ${minNameLen} characters length`\r\n    )\r\n    .max(\r\n      maxNameLen,\r\n      `First name should be of maximum ${maxNameLen} characters length`\r\n    )\r\n    .required(\"First name is required\"),\r\n\r\n  lname: yup\r\n    .string()\r\n    .min(\r\n      minNameLen,\r\n      `Last name should be of minimum ${minNameLen} characters length`\r\n    )\r\n    .max(\r\n      maxNameLen,\r\n      `Last name should be of maximum ${maxNameLen} characters length`\r\n    )\r\n    .required(\"Last name is required\"),\r\n\r\n  email: yup\r\n    .string()\r\n    .email(\"This email is invalid\")\r\n    .required(\"Email is required\"),\r\n\r\n  password: yup\r\n    .string()\r\n    .min(\r\n      minPassLen,\r\n      `Password should be of minimum ${minPassLen} characters length`\r\n    )\r\n    .max(\r\n      maxPassLen,\r\n      `Password should be of maximum ${maxPassLen} characters length`\r\n    )\r\n    .required(\"Password is required\"),\r\n\r\n  gender: yup.string().required(\"Gender is required\"),\r\n\r\n  birthday: yup.string().required(\"Birth day is required\"),\r\n  birthmonth: yup.string().required(\"Birth month is required\"),\r\n  birthyear: yup.string().required(\"Birth year is required\"),\r\n\r\n  country: yup.string().required(\"Country is required\"),\r\n  city: yup\r\n    .string()\r\n    .min(\r\n      minCityLen,\r\n      `City should be of minimum ${minPassLen} characters length`\r\n    )\r\n    .max(\r\n      maxCityLen,\r\n      `City should be of maximum ${maxPassLen} characters length`\r\n    )\r\n    .required(\"City is required\"),\r\n});\r\n\r\nconst Birthdate = (props) => {\r\n  const minPossibleYear = 1900;\r\n  const date = new Date();\r\n\r\n  const years = [],\r\n    days = Array.from(Array(31).keys()).map((x) => {\r\n      return { label: String(x + 1), value: x + 1 };\r\n    }),\r\n    monthes = Array.from(Array(12).keys()).map((x) => {\r\n      return { label: String(x + 1), value: x + 1 };\r\n    });\r\n  for (let i = date.getFullYear(); i >= minPossibleYear; i--)\r\n    years.push({\r\n      label: String(i),\r\n      value: i,\r\n    });\r\n\r\n  return (\r\n    <FormControl>\r\n      <Autocomplete\r\n        id=\"birthday\"\r\n        name=\"birthday\"\r\n        style={{ width: 300 }}\r\n        options={days}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => {\r\n          return (\r\n            <TextField\r\n              error={\r\n                props.formik.touched.birthday &&\r\n                Boolean(props.formik.errors.birthday)\r\n              }\r\n              helperText={\r\n                props.formik.touched.birthday && props.formik.errors.birthday\r\n              }\r\n              {...params}\r\n              label=\"Day of birth\"\r\n              variant=\"outlined\"\r\n            />\r\n          );\r\n        }}\r\n        onChange={async (e, newday) => {\r\n          if (newday) props.formik.values.birthday = newday.value;\r\n          else props.formik.values.birthday = \"\";\r\n          await props.formik.handleChange(\"birthday\");\r\n        }}\r\n        error={\r\n          props.formik.touched.birthday && Boolean(props.formik.errors.birthday)\r\n        }\r\n        helperText={\r\n          props.formik.touched.birthday && props.formik.errors.birthday\r\n        }\r\n      />\r\n      <Autocomplete\r\n        id=\"birthmonth\"\r\n        name=\"birthmonth\"\r\n        style={{ width: 300 }}\r\n        options={monthes}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => {\r\n          return (\r\n            <TextField\r\n              error={\r\n                props.formik.touched.birthmonth &&\r\n                Boolean(props.formik.errors.birthmonth)\r\n              }\r\n              helperText={\r\n                props.formik.touched.birthmonth &&\r\n                props.formik.errors.birthmonth\r\n              }\r\n              {...params}\r\n              label=\"Month of birth\"\r\n              variant=\"outlined\"\r\n            />\r\n          );\r\n        }}\r\n        onChange={async (e, newmonth) => {\r\n          if (newmonth) props.formik.values.birthmonth = newmonth.value;\r\n          else props.formik.values.birthmonth = \"\";\r\n          await props.formik.handleChange(\"birthmonth\");\r\n        }}\r\n        error={\r\n          props.formik.touched.birthmonth &&\r\n          Boolean(props.formik.errors.birthmonth)\r\n        }\r\n        helperText={\r\n          props.formik.touched.birthmonth && props.formik.errors.birthmonth\r\n        }\r\n      />\r\n\r\n      <Autocomplete\r\n        id=\"birthyear\"\r\n        name=\"birthyear\"\r\n        style={{ width: 300 }}\r\n        options={years}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => {\r\n          return (\r\n            <TextField\r\n              error={\r\n                props.formik.touched.birthyear &&\r\n                Boolean(props.formik.errors.birthyear)\r\n              }\r\n              helperText={\r\n                props.formik.touched.birthyear && props.formik.errors.birthyear\r\n              }\r\n              {...params}\r\n              label=\"Year of birth\"\r\n              variant=\"outlined\"\r\n            />\r\n          );\r\n        }}\r\n        onChange={async (e, newyear) => {\r\n          if (newyear) props.formik.values.birthyear = newyear.value;\r\n          else props.formik.values.birthyear = \"\";\r\n          await props.formik.handleChange(\"birthyear\");\r\n        }}\r\n        error={\r\n          props.formik.touched.birthyear &&\r\n          Boolean(props.formik.errors.birthyear)\r\n        }\r\n        helperText={\r\n          props.formik.touched.birthyear && props.formik.errors.birthyear\r\n        }\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst Signup = (props) => {\r\n  // Redirection to 'home' is a token recognised\r\n  if (document.cookie.indexOf(\"; token\") > -1) {\r\n    window.location.replace(\"/home\");\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      fname: \"\",\r\n      lname: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      birthday: \"\",\r\n      birthmonth: \"\",\r\n      birthyear: \"\",\r\n      gender: \"\",\r\n      country: \"\",\r\n      city: \"\",\r\n    },\r\n\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      const user = {\r\n        fName: values.fname,\r\n        lName: values.lname,\r\n        email: values.email,\r\n        password: values.password,\r\n        country: values.country,\r\n        city: values.city,\r\n        gender: values.gender,\r\n        dob: values.birthyear + \"-\" + values.birthmonth + \"-\" + values.birthday,\r\n      };\r\n\r\n      try {\r\n        const res = await fetch(\"/signup\", {\r\n          method: \"post\",\r\n          body: JSON.stringify(user),\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n        const resJson = await res.json();\r\n        if (!resJson.valid) {\r\n          console.log(resJson.message);\r\n        } else {\r\n          // valid request\r\n          props.gotUserData(resJson.userData);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n\r\n      console.log(values);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <FormControl>\r\n        <TextField\r\n          id=\"in-txt-fname\"\r\n          name=\"fname\"\r\n          label=\"First Name\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.fname && Boolean(formik.errors.fname)}\r\n          helperText={formik.touched.fname && formik.errors.fname}\r\n        />\r\n        <TextField\r\n          id=\"in-txt-lname\"\r\n          name=\"lname\"\r\n          label=\"Last Name\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.lname && Boolean(formik.errors.lname)}\r\n          helperText={formik.touched.lname && formik.errors.lname}\r\n        />\r\n        <TextField\r\n          id=\"in-txt-email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n        />\r\n        <TextField\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.password && Boolean(formik.errors.password)}\r\n          helperText={formik.touched.password && formik.errors.password}\r\n        />\r\n\r\n        <FormControl\r\n          component=\"fieldset\"\r\n          error={formik.touched.gender && Boolean(formik.errors.gender)}\r\n          helperText={formik.touched.gender && formik.errors.gender}\r\n        >\r\n          <RadioGroup name=\"gender\" row onChange={formik.handleChange}>\r\n            <FormControlLabel\r\n              value=\"m\"\r\n              control={<Radio />}\r\n              label=\"Male\"\r\n              labelPlacement=\"top\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"f\"\r\n              control={<Radio />}\r\n              label=\"Female\"\r\n              labelPlacement=\"top\"\r\n            />\r\n            <FormHelperText\r\n              disabled={formik.touched.gender && Boolean(formik.errors.gender)}\r\n            >\r\n              {formik.errors.gender}\r\n            </FormHelperText>\r\n          </RadioGroup>\r\n        </FormControl>\r\n\r\n        <Birthdate formik={formik} />\r\n\r\n        <Autocomplete\r\n          id=\"country\"\r\n          style={{ width: 300 }}\r\n          name=\"country\"\r\n          options={countries}\r\n          autoHighlight\r\n          getOptionLabel={(option) => option.label}\r\n          renderInput={(params) => {\r\n            return (\r\n              <TextField\r\n                {...params}\r\n                label=\"Choose a country\"\r\n                variant=\"outlined\"\r\n                error={formik.touched.country && Boolean(formik.errors.country)}\r\n                helperText={formik.touched.country && formik.errors.country}\r\n              />\r\n            );\r\n          }}\r\n          onChange={(e, newcountry) => {\r\n            if (newcountry) formik.values.country = newcountry.code;\r\n            else formik.values.country = \"\";\r\n            formik.handleChange(\"country\");\r\n          }}\r\n        />\r\n        <TextField\r\n          id=\"city\"\r\n          name=\"city\"\r\n          label=\"City\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.city && Boolean(formik.errors.city)}\r\n          helperText={formik.touched.city && formik.errors.city}\r\n        />\r\n\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          SignUp\r\n        </Button>\r\n        <small>\r\n          <span style={{ color: \"gray\" }}>already have an account? </span>\r\n          <a href=\"\\login\">login</a>\r\n        </small>\r\n      </FormControl>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","E:\\sokial\\sokial\\src\\components\\login.js",["144"],"import { useState, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\n\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\nconst maxPassLen = 20,\r\n  minPassLen = 6;\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email(\"This email is invalid\")\r\n    .required(\"Email is required\"),\r\n\r\n  password: yup\r\n    .string()\r\n    .min(\r\n      minPassLen,\r\n      `Password should be of minimum ${minPassLen} characters length`\r\n    )\r\n    .max(\r\n      maxPassLen,\r\n      `Password should be of maximum ${maxPassLen} characters length`\r\n    )\r\n    .required(\"Password is required\"),\r\n});\r\n\r\nconst Login = (props) => {\r\n  // Redirection to 'home' is a token recognised\r\n  /*if (document.cookie.indexOf(\"; token\") > -1) {\r\n    window.location.replace(\"/home\");\r\n    // TODO :: Get a way to enforce not show Login component\r\n  }*/\r\n\r\n  const [loginError, setLoginError] = useState(null);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      const user = {\r\n        email: values.email,\r\n        password: values.password,\r\n      };\r\n\r\n      try {\r\n        const res = await fetch(\"/login\", {\r\n          method: \"post\",\r\n          body: JSON.stringify(user),\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n        const resJson = await res.json();\r\n        if (!resJson.valid) {\r\n          setLoginError({ message: resJson.message });\r\n          console.log(resJson.message);\r\n        } else {\r\n          // valid request\r\n          props.gotUserData(resJson.userData);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form id=\"login-form\" onSubmit={formik.handleSubmit}>\r\n      <FormControl error={loginError}>\r\n        <FormHelperText disabled={loginError}>\r\n          {loginError && loginError.message}\r\n        </FormHelperText>\r\n        <TextField\r\n          id=\"in-txt-email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n          className=\"login-input-cell\"\r\n        />\r\n        <TextField\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.password && Boolean(formik.errors.password)}\r\n          helperText={formik.touched.password && formik.errors.password}\r\n          className=\"login-input-cell\"\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\"login-input-cell\"\r\n        >\r\n          Login\r\n        </Button>\r\n        <small>\r\n          <span style={{ color: \"gray\" }}>want to create an account? </span>\r\n          <a href=\"\\signup\">signup</a>\r\n        </small>\r\n      </FormControl>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","E:\\sokial\\sokial\\src\\components\\profile.js",["145","146","147","148","149","150","151","152","153","154","155"],"import { TextField, TextareaAutosize, Grid, Button } from \"@material-ui/core\";\r\nimport ProfileHeader from \"./profileHeader\";\r\nimport Posting from \"./posting\";\r\nimport PostsProfileSection from \"./postsProfileSection\";\r\nimport ProfilePostsOption from \"./profilePostsOption\";\r\nimport ProfileFriendsOption from \"./profileFriendsOption\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst Profile = (props) => {\r\n  const [profileData, setProfileData] = useState({});\r\n  const [friendshipRel, setFriendshipRel] = useState(null);\r\n  const [profileChosenOption, setProfileChosenOption] = useState(\"posts\");\r\n\r\n  // Get the userId in the path (want to get this profile)\r\n  const params = new URLSearchParams(window.location.search);\r\n\r\n  if (params.get(\"id\") === null) {\r\n    // then it's my profile\r\n    window.location.replace(\r\n      `${window.location.origin}/profile?id=${props.identity.id}`\r\n    );\r\n  }\r\n\r\n  // Get basic data of current profile\r\n  useEffect(() => {\r\n    let userData;\r\n    fetch(\r\n      `/get-basic-user-data/${params.get(\"id\")}?` +\r\n        new URLSearchParams({\r\n          getFriendshipRel: !isMyProfile,\r\n        }),\r\n      {\r\n        method: \"GET\",\r\n      }\r\n    )\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        if (!res.valid) throw new Error(res.message);\r\n        else {\r\n          userData = res.userData;\r\n          setFriendshipRel(res.friendshipRel);\r\n\r\n          if (res.userData.profile_image_path)\r\n            return Promise.all([\r\n              res.userData,\r\n              fetch(\r\n                `/get-profile-img/${res.userData.id}?` +\r\n                  new URLSearchParams({\r\n                    profile_image_path: res.userData.profile_image_path,\r\n                  })\r\n              ),\r\n            ]);\r\n          else setProfileData(res.userData);\r\n        }\r\n      })\r\n      .then(([userData, res]) => {\r\n        if (res && res.ok) return Promise.all([userData, res.blob()]);\r\n      })\r\n      .then(([userData, img]) => {\r\n        img = URL.createObjectURL(img);\r\n        setProfileData({ ...userData, profileImage: img });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"ERROR:\", err.message);\r\n        if (userData) setProfileData(userData);\r\n      });\r\n  }, [params.get(\"id\")]);\r\n\r\n  const isMyProfile = params.get(\"id\") == props.identity.id;\r\n\r\n  if (profileData === null || (!isMyProfile && !friendshipRel)) return null;\r\n  else\r\n    return (\r\n      <div>\r\n        <ProfileHeader\r\n          //key={profileData.id}\r\n          setProfileChosenOption={setProfileChosenOption}\r\n          profileData={profileData}\r\n          isMyProfile={isMyProfile}\r\n          areFriends={isMyProfile ? undefined : friendshipRel.areFriends}\r\n          thereIsFrReq={\r\n            friendshipRel &&\r\n            (friendshipRel.friendshipReqSenderId ||\r\n              friendshipRel.friendshipReqReceiverId)\r\n          }\r\n          didISendFrReq={\r\n            isMyProfile\r\n              ? undefined\r\n              : friendshipRel.friendshipReqSenderId === props.identity.id\r\n          }\r\n        />\r\n        {profileChosenOption == \"posts\" ? (\r\n          <ProfilePostsOption\r\n            key={profileData.id}\r\n            identity={props.identity}\r\n            isMyProfile={isMyProfile}\r\n            profileData={profileData}\r\n          />\r\n        ) : profileChosenOption == \"friends\" ? (\r\n          <ProfileFriendsOption\r\n            key={profileData.id}\r\n            identity={props.identity}\r\n            isMyProfile={isMyProfile}\r\n            profileData={profileData}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","E:\\sokial\\sokial\\src\\components\\posting.js",["156","157","158","159","160"],"import {\r\n  TextareaAutosize,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\nimport generalFunctions from \"../usable functions/general\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport Avatar from \"./../images/default_profile_image.png\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport PhotoCameraIcon from \"@material-ui/icons/PhotoCamera\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\nconst Posting = ({ identity, isMyProfile, pushingNewPost }) => {\r\n  /*\r\n  TODO :: Save the textarea if no posting or refreshing happened\r\n  */\r\n\r\n  const [postImageIsSelected, setPostImageIsSelected] = useState(false);\r\n  const postingAuthorProfileImageRef = useRef(null);\r\n  const imageInputRef = useRef({});\r\n  const selectedImageRef = useRef(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [disablePosting, setDisablePosting] = useState(true);\r\n  const [disableWriting, setDisableWriting] = useState(false);\r\n  const textareaRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      identity &&\r\n      identity.profileImage &&\r\n      postingAuthorProfileImageRef.current\r\n    ) {\r\n      postingAuthorProfileImageRef.current.src = identity.profileImage || \" \";\r\n    } else if (postingAuthorProfileImageRef.current) {\r\n      postingAuthorProfileImageRef.current.src = Avatar;\r\n    }\r\n  }, [identity, postingAuthorProfileImageRef, window.location.href]);\r\n\r\n  const resetComponent = () => {\r\n    cancelSelectedPostImage();\r\n    setOpenDialog(false);\r\n    setDisableWriting(false);\r\n  };\r\n\r\n  const handleSelectPostImage = (e) => {\r\n    try {\r\n      if (imageInputRef.current.files[0]) {\r\n        console.log(\"hey\");\r\n        setPostImageIsSelected(true);\r\n        const img = URL.createObjectURL(imageInputRef.current.files[0]);\r\n        selectedImageRef.current.src = img;\r\n      } else console.log(\"NOOO\");\r\n    } catch (err) {\r\n      console.log(\"Error: \", err.message);\r\n    }\r\n  };\r\n\r\n  const cancelSelectedPostImage = () => {\r\n    setPostImageIsSelected(false);\r\n    selectedImageRef.current.src = null;\r\n    imageInputRef.current.value = \"\";\r\n  };\r\n\r\n  const handleOpenPostingDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n  const handleClosePostingDialog = () => {\r\n    resetComponent();\r\n  };\r\n\r\n  const handleClickPost = () => {\r\n    setDisablePosting(true);\r\n    setDisableWriting(true);\r\n\r\n    fetch(\"/post\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n      body: JSON.stringify({\r\n        content: textareaRef.current.value,\r\n        privacy: 5 /* TODO :: Update  */,\r\n        timestamp: generalFunctions.getTimestamp(),\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(\"Can't post.\");\r\n\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        let fetchingImgPromise;\r\n\r\n        if (imageInputRef.current.files[0]) {\r\n          const formData = new FormData();\r\n\r\n          formData.append(\"blob\", imageInputRef.current.files[0]);\r\n\r\n          fetchingImgPromise = fetch(`/set-post-image/${res.postData.id}`, {\r\n            method: \"POST\",\r\n            body: formData,\r\n          });\r\n        }\r\n\r\n        return Promise.all([res, fetchingImgPromise]);\r\n      })\r\n      .then(([postRes, imgRes]) => {\r\n        return Promise.all([postRes, imgRes ? imgRes.json() : null]);\r\n      })\r\n      .then(([postRes, imgRes]) => {\r\n        console.log(imgRes);\r\n        pushingNewPost({\r\n          postData: {\r\n            id: postRes.postData.id,\r\n            content: textareaRef.current.value,\r\n            timestamp: postRes.postData.timestamp,\r\n            privacy: postRes.postData.privacy,\r\n            postType: postRes.postData.post_type,\r\n            postImageData: imgRes ? [imgRes.imageData] : [],\r\n            postCounters: {\r\n              commentsCounter: postRes.postData.comments_counter,\r\n              reactionsCounter: postRes.postData.reactions_counter,\r\n            },\r\n          },\r\n          postAuthorData: {\r\n            id: postRes.postData.author_user_id,\r\n            firstName: identity.firstName,\r\n            lastName: identity.lastName,\r\n            profileImage: identity.profileImage,\r\n          },\r\n          reactions: [],\r\n        });\r\n        resetComponent();\r\n      })\r\n      .catch((res) => {\r\n        /*\r\n        TODO :: Handle posting failure\r\n      */\r\n        resetComponent();\r\n        console.log(res.message);\r\n      });\r\n  };\r\n\r\n  if (!isMyProfile && window.location.pathname == \"/profile\") return null;\r\n  return (\r\n    <div id=\"profile-posting-section\" className=\"profile-posts-section\">\r\n      <div id=\"profile-posting-header\">\r\n        <img\r\n          ref={postingAuthorProfileImageRef}\r\n          id=\"wanna-posting-author-profile-img\"\r\n        ></img>\r\n        <div\r\n          id=\"profile-wanna-posting-textarea\"\r\n          onClick={handleOpenPostingDialog}\r\n        ></div>\r\n      </div>\r\n      <Dialog\r\n        className=\"posting-dialoge\"\r\n        open={openDialog}\r\n        onClose={handleClosePostingDialog}\r\n      >\r\n        <DialogTitle style={{ textAlign: \"center\" }}>Create post</DialogTitle>\r\n        <DialogContent>\r\n          <TextareaAutosize\r\n            ref={textareaRef}\r\n            rowsMin={3}\r\n            //rowsMax={8}\r\n            autoFocus\r\n            disabled={disableWriting}\r\n            placeholder=\"What's on your mind?\"\r\n            onInput={() => {\r\n              if (textareaRef.current.value.trim() == \"\") {\r\n                setDisablePosting(true);\r\n              } else if (disablePosting) setDisablePosting(false);\r\n            }}\r\n            style={{\r\n              width: \"100%\",\r\n              outlineStyle: \"none\",\r\n              borderStyle: \"none\",\r\n              resize: \"none\",\r\n              padding: \"0px 12px\",\r\n              fontSize: \"20px\",\r\n            }}\r\n          />\r\n          <div id=\"posting-input-image-div\">\r\n            {postImageIsSelected ? (\r\n              <IconButton\r\n                id=\"cancel-btn-selected-posting-image\"\r\n                onClick={cancelSelectedPostImage}\r\n              >\r\n                <ClearIcon />\r\n              </IconButton>\r\n            ) : null}\r\n\r\n            <img\r\n              className=\"posting-selecting-img\"\r\n              ref={selectedImageRef}\r\n              hidden={!postImageIsSelected}\r\n            />\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions\r\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n        >\r\n          <IconButton\r\n            onClick={() => {\r\n              imageInputRef.current.click();\r\n            }}\r\n          >\r\n            <PhotoCameraIcon />\r\n          </IconButton>\r\n          <input\r\n            accept=\"image/*\"\r\n            type=\"file\"\r\n            style={{ display: \"none\" }}\r\n            ref={imageInputRef}\r\n            onChange={handleSelectPostImage}\r\n          />\r\n          <Button\r\n            onClick={handleClickPost}\r\n            disabled={disablePosting && !postImageIsSelected}\r\n          >\r\n            Post\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posting;\r\n","E:\\sokial\\sokial\\src\\components\\post.js",["161","162","163","164","165","166","167"],"import { MenuItem, Menu, Grid, Button } from \"@material-ui/core\";\r\nimport PostCommentsSections from \"./postCommentsSection\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport PostEditing from \"./postEditing\";\r\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\r\nimport ThumbUpOutlinedIcon from \"@material-ui/icons/ThumbUpOutlined\";\r\nimport CommentOutlinedIcon from \"@material-ui/icons/CommentOutlined\";\r\nimport PostReactantsModal from \"./postReactantsModal\";\r\nimport Avatar from \"./../images/default_profile_image.png\";\r\nimport { set } from \"date-fns\";\r\n\r\nconst Post = (props) => {\r\n  const [openCommentsSection, setOpenCommentsSection] = useState(false);\r\n  const [menuAnchorElem, setMenuAnchorElem] = useState(null);\r\n  const [editingPost, setEditingPost] = useState(false);\r\n  const [reactantsModalOpen, setReactantsModalOpen] = useState(false);\r\n  const [authorProfileImg, setAuthorProfileImg] = useState(null); // I need it in home, image is not in props\r\n  const postContentRef = useRef(null);\r\n  const postImageRef = useRef(null);\r\n  const authorProfileImgRef = useRef(null);\r\n  const isMoreOptionsOpen = menuAnchorElem !== null;\r\n\r\n  const openReactantsModal = () => {\r\n    setReactantsModalOpen(true);\r\n  };\r\n  const closeReactantsModal = () => {\r\n    setReactantsModalOpen(false);\r\n  };\r\n\r\n  const handleOpenMoreOptions = (event) => {\r\n    setMenuAnchorElem(event.target);\r\n  };\r\n\r\n  const handleCloseMoreOptions = (event) => {\r\n    setMenuAnchorElem(null);\r\n  };\r\n\r\n  const handleToggleCommentsSection = () => {\r\n    setOpenCommentsSection(!openCommentsSection);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch post image if exists\r\n\r\n    if (props.postData.postImageData.length) {\r\n      fetch(`/get-post-image/${props.postData.postImageData[0].image_path}`, {\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          if (res && res.ok) return res.blob();\r\n        })\r\n        .then((res) => {\r\n          //console.log(props.postData.postImageData[0].image_path);\r\n          const img = URL.createObjectURL(res);\r\n          postImageRef.current.src = img || \" \";\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.message);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // if have author image path but not the image, go and fetch it\r\n    if (\r\n      !props.postAuthorData.profileImage &&\r\n      props.postAuthorData.profileImagePath\r\n    ) {\r\n      fetch(\r\n        `/get-profile-img/${props.postAuthorData.id}?` +\r\n          new URLSearchParams({\r\n            profile_image_path: props.postAuthorData.profileImagePath,\r\n          })\r\n      )\r\n        .then((res) => (res.ok ? res.blob() : undefined))\r\n        .then((res) => {\r\n          if (res) {\r\n            console.log(res);\r\n            const img = URL.createObjectURL(res);\r\n            setAuthorProfileImg(img);\r\n          }\r\n        });\r\n    } else if (props.postAuthorData.profileImage) {\r\n      setAuthorProfileImg(props.postAuthorData.profileImage);\r\n    }\r\n  }, [props.postAuthorData]);\r\n\r\n  useEffect(() => {\r\n    if (authorProfileImgRef.current && authorProfileImg) {\r\n      authorProfileImgRef.current.src = authorProfileImg;\r\n    } else authorProfileImgRef.current.src = Avatar;\r\n  }, [authorProfileImgRef, authorProfileImg]);\r\n\r\n  const handleClickDeletePost = () => {\r\n    props.handleDeletePost(props.postIndex);\r\n    handleCloseMoreOptions(false);\r\n  };\r\n  const handleClickEditPost = () => {\r\n    setEditingPost(true);\r\n    handleCloseMoreOptions(false);\r\n  };\r\n\r\n  const handleToggleLike = () => {\r\n    props.toggleReaction(props.postIndex, props.myReactionType ? null : \"1\");\r\n    fetch(\r\n      `/post/react/${props.postData.id}?` +\r\n        new URLSearchParams({ reaction_type: \"1\" }),\r\n      { method: \"POST\" }\r\n    )\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(\"Can't react\");\r\n        else return res.json();\r\n      })\r\n      .then((res) => {\r\n        props.updatePostCounters(props.postIndex, res.post_counters);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error\", err.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid id=\"tmp-post-container\">\r\n      {reactantsModalOpen ? (\r\n        <PostReactantsModal\r\n          postData={props.postData}\r\n          closeModal={closeReactantsModal}\r\n        />\r\n      ) : null}\r\n\r\n      <div className=\"post\" style={{ ...props.specificStyle }}>\r\n        <div className=\"post-header\">\r\n          <div className=\"post-identity-container\">\r\n            <a\r\n              href={`${window.location.origin}/profile?id=${props.postAuthorData.id}`}\r\n            >\r\n              <img className=\"post-profile-image\" ref={authorProfileImgRef} />\r\n            </a>\r\n\r\n            <a\r\n              className=\"clickable-account-name\"\r\n              href={`${window.location.origin}/profile?id=${props.postAuthorData.id}`}\r\n            >{`${props.postAuthorData.firstName} ${props.postAuthorData.lastName}`}</a>\r\n\r\n            {props.identity.id == props.postAuthorData.id ? (\r\n              <div className=\"post-more-div\">\r\n                <Menu\r\n                  open={isMoreOptionsOpen}\r\n                  anchorEl={menuAnchorElem}\r\n                  onClose={handleCloseMoreOptions}\r\n                  keepMounted\r\n                >\r\n                  <MenuItem onClick={handleClickEditPost}> Edit</MenuItem>\r\n                  <MenuItem onClick={handleClickDeletePost}> Delete </MenuItem>\r\n                </Menu>\r\n\r\n                <Button\r\n                  id=\"post-more-btn\"\r\n                  disableRipple\r\n                  style={{ backgroundColor: \"transparent\" }}\r\n                  startIcon={<MoreVertIcon />}\r\n                  onClick={handleOpenMoreOptions}\r\n                />\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n\r\n        <div ref={postContentRef} className=\"post-content\">\r\n          <div class=\"post-content-text\">{props.postData.content}</div>\r\n          {props.postData.postImageData.length ? (\r\n            <div className=\"post-image-div\">\r\n              <img ref={postImageRef} className=\"post-image\" />\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n\r\n        <div className=\"post-footer\">\r\n          {props.postData.postCounters.reactionsCounter ||\r\n          props.postData.postCounters.commentsCounter ? (\r\n            <div className=\"post-counters\">\r\n              <div\r\n                className=\"post-reaction-counter\"\r\n                hidden={props.postData.postCounters.reactionsCounter == 0}\r\n                onClick={openReactantsModal}\r\n              >\r\n                <ThumbUpAltIcon\r\n                  style={{\r\n                    height: \"18px\",\r\n                    position: \"relative\",\r\n                    bottom: \"-5px\",\r\n                  }}\r\n                  color={\"primary\"}\r\n                />\r\n                {props.postData.postCounters.reactionsCounter} Likes\r\n              </div>\r\n              <div\r\n                className=\"post-comment-counter\"\r\n                hidden={props.postData.postCounters.commentsCounter == 0}\r\n                onClick={handleToggleCommentsSection}\r\n              >\r\n                {props.postData.postCounters.commentsCounter} Comments\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"post-btns\">\r\n            <Button\r\n              onClick={handleToggleLike}\r\n              color={props.myReactionType ? \"primary\" : \"inherit\"}\r\n              startIcon={\r\n                props.myReactionType ? (\r\n                  <ThumbUpAltIcon color={\"primary\"} />\r\n                ) : (\r\n                  <ThumbUpOutlinedIcon color={\"inherit\"} />\r\n                )\r\n              }\r\n              disableRipple\r\n            >\r\n              Like\r\n            </Button>\r\n            <Button\r\n              onClick={handleToggleCommentsSection}\r\n              color={\"inherit\"}\r\n              startIcon={<CommentOutlinedIcon color=\"inherit\" />}\r\n              disableRipple\r\n            >\r\n              Comment\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <PostCommentsSections\r\n          key={props.postData.id}\r\n          identity={props.identity}\r\n          postAuthorData={props.postAuthorData}\r\n          postData={props.postData}\r\n          openCommentsSection={openCommentsSection}\r\n        />\r\n      </div>\r\n      <PostEditing\r\n        postIndex={props.postIndex}\r\n        editingPost={editingPost}\r\n        setEditingPost={setEditingPost}\r\n        postContentRef={postContentRef}\r\n        handleEditPost={props.handleEditPost}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","E:\\sokial\\sokial\\src\\components\\postsProfileSection.js",[],"E:\\sokial\\sokial\\src\\components\\profileHeader.js",["168"],"import { useState, useEffect } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport ProfileImg from \"./profileImg\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport { friendshipRelatedFunctions } from \"../usable functions/endpoint-related\";\r\n\r\nconst ProfileHeader = (props) => {\r\n  const friendshipButtonsAttr = {\r\n    variant: \"outlined\",\r\n    color: \"primary\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"new\");\r\n  }, []);\r\n\r\n  const friendshipRelButton = props.isMyProfile ? null : props.areFriends ? (\r\n    <Button\r\n      {...friendshipButtonsAttr}\r\n      startIcon={<RemoveCircleIcon />}\r\n      onClick={() => {\r\n        friendshipRelatedFunctions.handleUnfriendClick(props.profileData.id);\r\n      }}\r\n    >\r\n      Unfriend\r\n    </Button>\r\n  ) : !props.thereIsFrReq ? (\r\n    <Button\r\n      {...friendshipButtonsAttr}\r\n      startIcon={<AddCircleIcon />}\r\n      onClick={() => {\r\n        friendshipRelatedFunctions.handleAddFriendClick(props.profileData.id);\r\n      }}\r\n    >\r\n      Add Friend\r\n    </Button>\r\n  ) : props.didISendFrReq ? (\r\n    <Button\r\n      {...friendshipButtonsAttr}\r\n      startIcon={<CancelIcon />}\r\n      onClick={() => {\r\n        friendshipRelatedFunctions.handleUnrequestFriendship(\r\n          props.profileData.id\r\n        );\r\n      }}\r\n    >\r\n      Unrequest friendship\r\n    </Button>\r\n  ) : (\r\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n      <Button\r\n        {...friendshipButtonsAttr}\r\n        startIcon={<CheckCircleIcon />}\r\n        onClick={() => {\r\n          friendshipRelatedFunctions.handleAcceptFriendship(\r\n            props.profileData.id\r\n          );\r\n        }}\r\n      >\r\n        Accept friendship\r\n      </Button>\r\n\r\n      <Button\r\n        {...friendshipButtonsAttr}\r\n        startIcon={<CancelIcon color={\"secondary\"} />}\r\n        onClick={() => {\r\n          friendshipRelatedFunctions.handleRejectFriendship(\r\n            props.profileData.id\r\n          );\r\n        }}\r\n      >\r\n        Reject friendship\r\n      </Button>\r\n    </div>\r\n  );\r\n  return (\r\n    <div id=\"profile-header-div\">\r\n      <div id=\"profile-cover-container\"></div>\r\n      <ProfileImg\r\n        profileData={props.profileData}\r\n        isMyProfile={props.isMyProfile}\r\n      />\r\n\r\n      {props.profileData.firstName ? (\r\n        <div id=\"profile-name-container\">{`${props.profileData.firstName} ${props.profileData.lastName}`}</div>\r\n      ) : null}\r\n\r\n      <div id=\"profile-friendship-buttons-div\">{friendshipRelButton}</div>\r\n      <div id=\"profile-header-options-container\">\r\n        <Button\r\n          id=\"profile-header-posts-option-btn\"\r\n          size=\"large\"\r\n          onClick={() => {\r\n            props.setProfileChosenOption(\"posts\");\r\n          }}\r\n        >\r\n          Posts\r\n        </Button>\r\n        <Button\r\n          id=\"profile-header-friends-option-btn\"\r\n          size=\"large\"\r\n          onClick={() => {\r\n            props.setProfileChosenOption(\"friends\");\r\n          }}\r\n        >\r\n          Friends\r\n        </Button>\r\n        <Button id=\"profile-header-about-option-btn\" size=\"large\">\r\n          About\r\n        </Button>\r\n\r\n        <Button id=\"profile-header-images-option-btn\" size=\"large\">\r\n          Images\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileHeader;\r\n","E:\\sokial\\sokial\\src\\components\\mainBar.js",["169"],"import { NavLink } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Badge } from \"@material-ui/core\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport FriendshipNotificationsButton from \"./friendshipNotificationsButton\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\n\r\nconst MainBar = (props) => {\r\n  if (props.identity == null) {\r\n    return (\r\n      <AppBar position=\"fixed\" id=\"main-bar\">\r\n        <Toolbar id=\"mainbar-notlogged-toolbar\">\r\n          <Typography variant=\"h6\">Sokial</Typography>\r\n          <div id=\"mainbar-notlogged-buttons\">\r\n            <Button color=\"inherit\">\r\n              <NavLink to=\"/login\" className=\"navlink-button\">\r\n                Login\r\n              </NavLink>\r\n            </Button>\r\n            <Button color=\"inherit\" href=\"/signup\" aria-current=\"page\">\r\n              <NavLink to=\"/Signup\" className=\"navlink-button\">\r\n                Signup\r\n              </NavLink>\r\n            </Button>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  } else {\r\n    return (\r\n      <AppBar position=\"fixed\" id=\"main-bar\">\r\n        <Toolbar id=\"mainbar-logged-toolbar\">\r\n          <Typography variant=\"h6\">Sokial</Typography>\r\n\r\n          <NavLink to=\"/home\" className=\"navlink-button\">\r\n            <IconButton color=\"inherit\">\r\n              <HomeIcon />\r\n            </IconButton>\r\n          </NavLink>\r\n\r\n          <NavLink\r\n            to={`/profile?id=${props.identity.id}`}\r\n            className=\"navlink-button\"\r\n          >\r\n            <IconButton color=\"inherit\">\r\n              <AccountCircleIcon />\r\n            </IconButton>\r\n          </NavLink>\r\n\r\n          <FriendshipNotificationsButton identity={props.identity} />\r\n          <Button id=\"\" color=\"inherit\" onClick={props.logout}>\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MainBar;\r\n","E:\\sokial\\sokial\\src\\components\\FriendshipNotificationsButton.js",["170","171","172","173","174","175","176","177"],"E:\\sokial\\sokial\\src\\components\\friendshipNotificationsButton.js",["178","179","180","181","182","183"],"import { Component, createRef } from \"react\";\r\nimport {\r\n  TextField,\r\n  TextareaAutosize,\r\n  Grid,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  Badge,\r\n} from \"@material-ui/core\";\r\nimport FriendshipNotifEntry from \"./friendshipNotifEntry\";\r\nimport NotificationsContainer from \"./notificationsContainer\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nclass FriendshipNotificationsButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      openDialog: false,\r\n\r\n      noMoreNotif: false,\r\n      fetchedNotif: [],\r\n      shownNotifDivs: [],\r\n    };\r\n\r\n    this.dialogRef = createRef(null);\r\n\r\n    this.numNotifToFetch = 15; // It's a parameter that can be changed\r\n    this.numNotifToPush = 5; // It's a parameter that can be changed\r\n\r\n    this.handleClickFriendshipNotif = this.handleClickFriendshipNotif.bind(\r\n      this\r\n    );\r\n    this.pushToShownNotif = this.pushToShownNotif.bind(this);\r\n    this.handleWaitingForNotif = this.handleWaitingForNotif.bind(this);\r\n    this.fetchNewNotif = this.fetchNewNotif.bind(this);\r\n  }\r\n\r\n  // Fetching Friendship Notifications\r\n  fetchNewNotif() {\r\n    const escapeNotif = this.state.fetchedNotif.length;\r\n    const limitNotif = this.numNotifToFetch;\r\n\r\n    console.log(`${escapeNotif} ${limitNotif}`);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\r\n        `/friendship-request/requests?` +\r\n          new URLSearchParams({\r\n            asreceiver: true,\r\n            esc: escapeNotif,\r\n            limit: limitNotif,\r\n          }),\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      )\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((res) => {\r\n          if (!res.valid) {\r\n            // TODO :: Handle invalid fetch\r\n          } else {\r\n            console.log(res.data);\r\n            return resolve(res.data);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  handleClickFriendshipNotif() {\r\n    this.setState({\r\n      openDialog: !this.state.openDialog,\r\n    });\r\n  }\r\n\r\n  pushToShownNotif() {\r\n    const tmpNotifDivs = [];\r\n\r\n    let toPushLeft = this.state.shownNotifDivs.length;\r\n    let toPushRight = Math.min(\r\n      toPushLeft + this.numNotifToPush,\r\n      this.state.fetchedNotif.length\r\n    );\r\n\r\n    for (let i = toPushLeft; i < toPushRight; i++)\r\n      tmpNotifDivs.push(\r\n        <FriendshipNotifEntry\r\n          id={this.state.fetchedNotif[i].id}\r\n          fullName={`${this.state.fetchedNotif[i].firstName} ${this.state.fetchedNotif[i].lastName}`}\r\n        />\r\n      );\r\n\r\n    this.setState({\r\n      shownNotifDivs: this.state.shownNotifDivs.concat(tmpNotifDivs),\r\n    });\r\n  }\r\n\r\n  handleWaitingForNotif() {\r\n    this.setState({ waitingForNotif: true });\r\n\r\n    if (this.state.fetchedNotif.length === this.state.shownNotifDivs.length) {\r\n      // Need to fetch new notif\r\n      this.fetchNewNotif().then((notif) => {\r\n        //console.log(\"Fetched notif >> \", notif);\r\n        if (notif.length === 0) {\r\n          this.setState({ noMoreNotif: true });\r\n        } else {\r\n          this.setState({\r\n            fetchedNotif: this.state.fetchedNotif.concat(notif),\r\n          });\r\n          this.pushToShownNotif();\r\n        }\r\n      });\r\n    } else {\r\n      this.pushToShownNotif();\r\n    }\r\n\r\n    this.fetching = false;\r\n    this.setState({ waitingForNotif: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleWaitingForNotif();\r\n  }\r\n\r\n  render() {\r\n    let endDiv = null;\r\n    if (this.state.noMoreNotif === false && this.state.waitingForNotif)\r\n      endDiv = (\r\n        <div id=\"notif-profile-section-loading-div\">\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    else if (this.state.noMoreNotif === false) {\r\n      endDiv = (\r\n        <div>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={this.handleWaitingForNotif}\r\n          >\r\n            Load more...\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"notifbtn-with-container\">\r\n        <IconButton color=\"inherit\" onClick={this.handleClickFriendshipNotif}>\r\n          <Badge\r\n            badgeContent={this.state.fetchedNotif.length}\r\n            color=\"secondary\"\r\n            variant=\"dot\"\r\n          >\r\n            <PersonAddIcon />\r\n          </Badge>\r\n        </IconButton>\r\n\r\n        <Dialog\r\n          open={this.state.openDialog}\r\n          onClose={this.handleClickFriendshipNotif}\r\n        >\r\n          <div ref={this.dialogRef}></div>\r\n          <DialogTitle style={{ textAlign: \"center\" }}>\r\n            Friendship Notifications\r\n          </DialogTitle>\r\n          <DialogContent class=\"notif-container\">\r\n            {this.state.shownNotifDivs} {endDiv}\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FriendshipNotificationsButton;\r\n","E:\\sokial\\sokial\\src\\components\\notificationsContainer.js",["184","185","186","187","188","189","190","191"],"import {\r\n  TextField,\r\n  TextareaAutosize,\r\n  Grid,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\n\r\nconst NotificationsContainer = (props) => {};\r\n\r\nexport default NotificationsContainer;\r\n","E:\\sokial\\sokial\\src\\components\\friendshipNotifEntry.js",["192"],"import { Grid, Button, ButtonGroup, Container } from \"@material-ui/core\";\r\nimport { friendshipRelatedFunctions as frFuncs } from \"../usable functions/endpoint-related\";\r\n\r\nconst FriendshipNotifEntry = (props) => {\r\n  return (\r\n    <Grid direction=\"row\" className=\"friendship-notif-entry\" container>\r\n      <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <div class=\"friendship-notif-img\"></div>\r\n        <a\r\n          class=\"clickable-account-name friendship-notif-name\"\r\n          href={`${window.location.origin}/profile?id=${props.id}`}\r\n          style={{ marginLeft: \"4px\" }}\r\n        >\r\n          {props.fullName}\r\n        </a>\r\n      </Grid>\r\n      <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <ButtonGroup\r\n          size={\"small\"}\r\n          variant=\"contained\"\r\n          aria-label=\"contained primary button group\"\r\n        >\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={() => {\r\n              frFuncs.handleAcceptFriendship(props.id);\r\n            }}\r\n          >\r\n            Accept\r\n          </Button>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={() => {\r\n              frFuncs.handleRejectFriendship(props.id);\r\n            }}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default FriendshipNotifEntry;\r\n","E:\\sokial\\sokial\\src\\usable functions\\endpoint-related.js",[],"E:\\sokial\\sokial\\src\\components\\postCommentsSection.js",["193"],"import { createRef } from \"react\";\r\nimport { TextField, TextareaAutosize, Button } from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport generalFunctions from \"../usable functions/general\";\r\nimport PostComment from \"./postComment\";\r\nimport { Component } from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nclass PostCommentsSections extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      noMoreComments: false,\r\n      waitingForComments: false,\r\n      firstFetchDone: false,\r\n      fetchedComments: [],\r\n      shownCommentsDivs: [],\r\n    };\r\n    this.textareaRef = createRef(null);\r\n\r\n    this.numCommentsToFetch = 100; // It's a parameter that can be changed\r\n    this.numCommentsToPush = 20; // It's a parameter that can be changed\r\n\r\n    // This variable is used to prevent making a fetch while\r\n    // haven't get last sent fetch yet. (A problem of scrolling based fetching)\r\n    this.fetching = false;\r\n\r\n    this.handleSendComment = this.handleSendComment.bind(this);\r\n    this.fetchNewComments = this.fetchNewComments.bind(this);\r\n    this.pushToShownComments = this.pushToShownComments.bind(this);\r\n    this.handleWaitingForComments = this.handleWaitingForComments.bind(this);\r\n    this.handleEditComment = this.handleEditComment.bind(this);\r\n    this.handleDeleteComment = this.handleDeleteComment.bind(this);\r\n    this.pushingNewComment = this.pushingNewComment.bind(this);\r\n    this.createComment = this.createComment.bind(this);\r\n  }\r\n\r\n  createComment(newComment) {\r\n    return (\r\n      <PostComment\r\n        key={newComment.commentData.id}\r\n        commentData={{ ...newComment.commentData }}\r\n        commentAuthorData={{ ...newComment.commentAuthorData }}\r\n        postAuthorData={this.props.postAuthorData}\r\n        identity={this.props.identity}\r\n        handleEditComment={this.handleEditComment}\r\n        handleDeleteComment={this.handleDeleteComment}\r\n      />\r\n    );\r\n  }\r\n\r\n  pushingNewComment(newComment) {\r\n    const tmpFetchedComments = [...this.state.fetchedComments];\r\n    tmpFetchedComments.push(newComment); // TODO :: Update all comments' index those have not been shown yet\r\n\r\n    const tmpCommentsDivs = [...this.state.shownCommentsDivs];\r\n    newComment.commentData.commentIndex = tmpCommentsDivs.length;\r\n    tmpCommentsDivs.push(this.createComment(newComment));\r\n    this.setState({\r\n      fetchedComments: tmpFetchedComments,\r\n      shownCommentsDivs: tmpCommentsDivs,\r\n    });\r\n  }\r\n\r\n  handleSendComment() {\r\n    fetch(`/post/comment/${this.props.postData.id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify({\r\n        content: this.textareaRef.current.value,\r\n        timestamp: generalFunctions.getTimestamp(),\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error();\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        this.pushingNewComment({\r\n          commentData: {\r\n            id: res.commentData.id,\r\n            content: this.textareaRef.current.value,\r\n            timestamp: res.commentData.timestamp,\r\n            commentCounters: {\r\n              reactions_counter: res.commentData.reactions_counter,\r\n            },\r\n          },\r\n          postData: {\r\n            id: res.commentData.post_id,\r\n          },\r\n          commentAuthorData: {\r\n            id: res.commentData.author_user_id,\r\n            firstName: this.props.identity.firstName,\r\n            lastName: this.props.identity.lastName,\r\n            profileImagePath: this.props.identity.profileImagePath,\r\n            authorType: res.commentData.author_type,\r\n          },\r\n        });\r\n        this.textareaRef.current.value = \"\";\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n  }\r\n\r\n  handleEditComment(commentIndex, newContent) {\r\n    fetch(\r\n      `/comment/${this.state.fetchedComments[commentIndex].commentData.id}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n        body: JSON.stringify({ newContent: newContent }),\r\n      }\r\n    )\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(\"Failed to edit comment\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n\r\n    let tmpCommentsDivs = [...this.state.shownCommentsDivs];\r\n    let tmpFetcedComments = [...this.state.fetchedComments];\r\n    tmpFetcedComments[commentIndex].commentData.content = newContent;\r\n\r\n    tmpCommentsDivs[commentIndex] = {\r\n      ...tmpCommentsDivs[commentIndex],\r\n      props: {\r\n        ...tmpCommentsDivs[commentIndex].props,\r\n        commentData: {\r\n          ...tmpCommentsDivs[commentIndex].props.commentData,\r\n          content: newContent,\r\n        },\r\n      },\r\n    };\r\n    this.setState({\r\n      shownCommentsDivs: tmpCommentsDivs,\r\n      fetchedComments: tmpFetcedComments,\r\n    });\r\n  }\r\n\r\n  handleDeleteComment(commentIndex) {\r\n    fetch(\r\n      `/comment/${this.state.fetchedComments[commentIndex].commentData.id}`,\r\n      {\r\n        method: \"DELETE\",\r\n      }\r\n    )\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(\"Failed to delete comment\");\r\n        let tmpCommentsDivs = [...this.state.shownCommentsDivs];\r\n        let tmpFetcedComments = [...this.state.fetchedComments];\r\n        tmpCommentsDivs[commentIndex] = tmpFetcedComments[commentIndex] = null;\r\n        this.setState({\r\n          shownCommentsDivs: tmpCommentsDivs,\r\n          fetchedComments: tmpFetcedComments,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n  }\r\n\r\n  handleWaitingForComments() {\r\n    this.setState({ waitingForComments: true });\r\n\r\n    if (\r\n      this.state.fetchedComments.length === this.state.shownCommentsDivs.length\r\n    ) {\r\n      // Need to fetch new comments\r\n      this.fetchNewComments().then((comments) => {\r\n        comments = comments.map((entry) => {\r\n          return {\r\n            commentData: {\r\n              id: entry.id,\r\n              timestamp: entry.timestamp,\r\n              content: entry.content,\r\n            },\r\n            postData: { id: entry.post_id },\r\n            commentAuthorData: {\r\n              id: entry.author_user.id,\r\n              firstName: entry.author_user.first_name,\r\n              lastName: entry.author_user.last_name,\r\n              profileImagePath: entry.author_user.profile_image_path,\r\n            },\r\n          };\r\n        });\r\n        //console.log(\"Fetched comments >> \", comments);\r\n        if (comments.length === 0) {\r\n          this.setState({ noMoreComments: true });\r\n        } else {\r\n          this.setState({\r\n            fetchedComments: this.state.fetchedComments.concat(comments),\r\n          });\r\n          this.pushToShownComments();\r\n        }\r\n      });\r\n    } else {\r\n      this.pushToShownComments();\r\n    }\r\n\r\n    this.fetching = false;\r\n    this.setState({ waitingForComments: false });\r\n  }\r\n\r\n  fetchNewComments() {\r\n    const escapeComments = this.state.fetchedComments.length;\r\n    const limitComments = this.numCommentsToFetch;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\r\n        `/get-comments/${this.props.postData.id}?` +\r\n          new URLSearchParams({\r\n            esc: escapeComments,\r\n            limit: limitComments,\r\n          }),\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      )\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((res) => {\r\n          if (!res.valid) {\r\n            // TODO :: Handle invalid fetch\r\n          } else {\r\n            return resolve(res.comments);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  pushToShownComments() {\r\n    const tmpCommentsDivs = [];\r\n\r\n    let toPushLeft = this.state.shownCommentsDivs.length;\r\n    let toPushRight = Math.min(\r\n      toPushLeft + this.numCommentsToPush,\r\n      this.state.fetchedComments.length\r\n    );\r\n\r\n    for (let i = toPushLeft; i < toPushRight; i++) {\r\n      tmpCommentsDivs.push(\r\n        <PostComment\r\n          key={this.state.fetchedComments[i].commentData.id}\r\n          commentData={{\r\n            ...this.state.fetchedComments[i].commentData,\r\n            commentIndex: tmpCommentsDivs.length,\r\n          }}\r\n          commentAuthorData={this.state.fetchedComments[i].commentAuthorData}\r\n          postAuthorData={this.props.postAuthorData}\r\n          identity={this.props.identity}\r\n          handleEditComment={this.handleEditComment}\r\n          handleDeleteComment={this.handleDeleteComment}\r\n        />\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      shownCommentsDivs: this.state.shownCommentsDivs.concat(tmpCommentsDivs),\r\n      firstFetchDone: true,\r\n    });\r\n  }\r\n  /*\r\n  fetchingAuthorsProfileImgs(comments) {\r\n    return new Promise((resolve, reject) => {\r\n      const allFetchPromises = [];\r\n      for (let i = 0; i < comments.length; i++) {\r\n        allFetchPromises.push(\r\n          fetch(\r\n            `/get-profile-img/${comments[i].commentAuthorData.id}?` +\r\n              new URLSearchParams({\r\n                profile_image_path:\r\n                  comments[i].commentAuthorData.profileImagePath,\r\n              })\r\n          )\r\n        );\r\n      }\r\n      let fetchesPromise = Promise.all(allFetchPromises);\r\n      fetchesPromise\r\n        .then((fetches) => {\r\n          let blobsPromises = [];\r\n          for (let i = 0; i < comments.length; i++) {\r\n            if (fetches[i].ok) blobsPromises.push(fetches[i].blob());\r\n            else blobsPromises.push(null);\r\n          }\r\n          return Promise.all(blobsPromises);\r\n        })\r\n        .then((imgs) => {\r\n          for (let i = 0; i < comments.length; i++) {\r\n            if (imgs[i]) imgs[i] = URL.createObjectURL(imgs[i]);\r\n          }\r\n          return resolve(imgs);\r\n        });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      prevState.shownCommentsDivs &&\r\n      prevState.shownCommentsDivs.length !== this.state.shownCommentsDivs.length\r\n    ) {\r\n      // Fetch authors profile imgs\r\n      let left = prevState.shownCommentsDivs.length;\r\n      let right = Math.min(\r\n        left + this.numCommentsToPush,\r\n        this.state.shownCommentsDivs.length\r\n      );\r\n\r\n      this.fetchingAuthorsProfileImgs(\r\n        this.state.fetchedComments.slice(left)\r\n      ).then((result) => {\r\n        const tmpArr = [...this.state.shownCommentsDivs];\r\n        const tmpFetchedComments = [...this.state.fetchedComments];\r\n        for (let i = left; i < right; i++) {\r\n          tmpFetchedComments[i].commentAuthorData.profileImage =\r\n            result[i - left];\r\n          tmpArr[i] = {\r\n            ...tmpArr[i],\r\n            props: {\r\n              ...tmpArr[i].props,\r\n              commentAuthorData: {\r\n                ...tmpArr[i].props.commentAuthorData,\r\n                profileImage: result[i - left],\r\n              },\r\n            },\r\n          };\r\n        }\r\n        this.setState({\r\n          shownCommentsDivs: tmpArr,\r\n          fetchedComments: tmpFetchedComments,\r\n        });\r\n      });\r\n    }\r\n  }\r\n*/\r\n  componentDidMount() {\r\n    this.handleWaitingForComments();\r\n  }\r\n\r\n  render() {\r\n    let endDiv = null;\r\n    if (this.state.noMoreComments === false && this.state.waitingForComments)\r\n      endDiv = (\r\n        <div id=\"comments-profile-section-loading-div\">\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    else if (this.state.noMoreComments === false) {\r\n      endDiv = (\r\n        <div>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={this.handleWaitingForComments}\r\n          >\r\n            Load more...\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!this.props.openCommentsSection) return null;\r\n    else\r\n      return (\r\n        <div>\r\n          <div className=\"post-comments-section\">\r\n            {this.state.shownCommentsDivs}\r\n            {endDiv}\r\n\r\n            <div class=\"post-commenting-section\">\r\n              <TextareaAutosize\r\n                autoFocus\r\n                rowsMin={1}\r\n                rowsMax={8}\r\n                ref={this.textareaRef}\r\n                placeholder=\"Write a comment...\"\r\n                style={{\r\n                  width: \"100%\",\r\n                  minHeight: \"34px\",\r\n                  resize: \"none\",\r\n                  overflow: \"auto\",\r\n                  border: \"none\",\r\n                  outlineStyle: \"none\",\r\n                  borderRadius: \"18px\",\r\n                  fontSize: \"large\",\r\n                  background: \"#f0f2f5\",\r\n                  padding: \"7px 0 0 15px\",\r\n                }}\r\n              />\r\n              <div style={{ width: \"10%\", position: \"relative\" }}>\r\n                <Button\r\n                  id=\"post-comment-send-btn\"\r\n                  style={{ width: \"10px\", backgroundColor: \"transparent\" }}\r\n                  onClick={this.handleSendComment}\r\n                  startIcon={<SendIcon />}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default PostCommentsSections;\r\n","E:\\sokial\\sokial\\src\\usable functions\\general.js",[],"E:\\sokial\\sokial\\src\\components\\postComment.js",["194","195"],"import { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  MenuItem,\r\n  Menu,\r\n  TextareaAutosize,\r\n  Button,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport Avatar from \"./../images/default_profile_image.png\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\n\r\nconst PostComment = (props) => {\r\n  const [commentAuthorProfileImage, setCommentAuthorProfileImage] = useState(\r\n    null\r\n  );\r\n  const [menuAnchorElem, setMenuAnchorElem] = useState(null);\r\n  const [editing, setEditing] = useState(false);\r\n  const editingAreaRef = useRef(null);\r\n  const authorProfileImgRef = useRef(null);\r\n  const isMoreOptionsOpen = menuAnchorElem !== null;\r\n\r\n  useEffect(() => {\r\n    // Component did mount, Fetch image\r\n    if (props.commentAuthorData.profileImagePath) {\r\n      fetch(\r\n        `/get-profile-img/${props.commentAuthorData.id}?` +\r\n          new URLSearchParams({\r\n            profile_image_path: props.commentAuthorData.profileImagePath,\r\n          })\r\n      )\r\n        .then((res) => {\r\n          if (res && res.ok) return res.blob();\r\n        })\r\n        .then((res) => {\r\n          const img = URL.createObjectURL(res);\r\n          setCommentAuthorProfileImage(img);\r\n        })\r\n        .catch((err) => {});\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      authorProfileImgRef &&\r\n      authorProfileImgRef.current &&\r\n      commentAuthorProfileImage\r\n    ) {\r\n      authorProfileImgRef.current.src = commentAuthorProfileImage;\r\n    } else if (authorProfileImgRef.current) {\r\n      authorProfileImgRef.current.src = Avatar;\r\n    }\r\n  }, [authorProfileImgRef, commentAuthorProfileImage]);\r\n\r\n  const handleOpenMoreOptions = (event) => {\r\n    setMenuAnchorElem(event.target);\r\n  };\r\n\r\n  const handleCloseMoreOptions = () => {\r\n    setMenuAnchorElem(null);\r\n  };\r\n\r\n  const handleClickEditComment = () => {\r\n    setEditing(true);\r\n    handleCloseMoreOptions();\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    props.handleEditComment(\r\n      props.commentData.commentIndex,\r\n      editingAreaRef.current.value\r\n    );\r\n    setEditing(false);\r\n    handleCloseMoreOptions();\r\n  };\r\n\r\n  const handleDeleteComment = () => {\r\n    props.handleDeleteComment(props.commentData.commentIndex);\r\n    setEditing(false);\r\n    handleCloseMoreOptions();\r\n  };\r\n\r\n  return (\r\n    <div className=\"post-comment\">\r\n      <a\r\n        href={`${window.location.origin}/profile?id=${props.commentAuthorData.id}`}\r\n      >\r\n        <img ref={authorProfileImgRef} className=\"comment-author-img\"></img>\r\n      </a>\r\n      <div className=\"comment-right-col\">\r\n        <a\r\n          className=\"clickable-account-name comment-author-name\"\r\n          href={`${window.location.origin}/profile?id=${props.commentAuthorData.id}`}\r\n        >\r\n          {`${props.commentAuthorData.firstName} ${props.commentAuthorData.lastName}`}\r\n        </a>\r\n\r\n        <div className=\"comment-content\">\r\n          {!editing ? (\r\n            props.commentData.content\r\n          ) : (\r\n            <div\r\n              class=\"post-commenting-section\"\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              <TextareaAutosize\r\n                rowsMin={2}\r\n                rowsMax={8}\r\n                ref={editingAreaRef}\r\n                defaultValue={props.commentData.content}\r\n                style={{\r\n                  width: \"100%\",\r\n                  resize: \"none\",\r\n                  overflow: \"auto\",\r\n                  outlineStyle: \"none\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              />\r\n              <div>\r\n                <ButtonGroup\r\n                  style={{ marginTop: \"5px\" }}\r\n                  orientation={\"horizontal\"}\r\n                >\r\n                  <Button onClick={handleSaveEdit} style={{ width: \"50%\" }}>\r\n                    Save\r\n                  </Button>\r\n                  <Button\r\n                    onClick={() => {\r\n                      setEditing(false);\r\n                    }}\r\n                    style={{ width: \"50%\" }}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {props.commentAuthorData.id === props.identity.id ? (\r\n        <div className=\"comment-more-div\">\r\n          {!editing ? (\r\n            <Button\r\n              id=\"comment-more-btn\"\r\n              // disableRipple\r\n              disabled={editing}\r\n              style={{ backgroundColor: \"transparent\" }}\r\n              startIcon={<MoreVertIcon />}\r\n              onClick={handleOpenMoreOptions}\r\n            />\r\n          ) : null}\r\n\r\n          <Menu\r\n            anchorEl={menuAnchorElem}\r\n            open={isMoreOptionsOpen}\r\n            onClose={handleCloseMoreOptions}\r\n          >\r\n            <MenuItem onClick={handleClickEditComment}>Edit</MenuItem>\r\n            <MenuItem onClick={handleDeleteComment}>Delete</MenuItem>\r\n          </Menu>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostComment;\r\n","E:\\sokial\\sokial\\src\\components\\postEditing.js",["196","197"],"import {\r\n  TextareaAutosize,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\nimport generalFunctions from \"../usable functions/general\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nconst PostEditing = (props) => {\r\n  const [disablePosting, setDisablePosting] = useState(true);\r\n  const [disableWriting, setDisableWriting] = useState(false);\r\n  const textareaRef = useRef(null);\r\n\r\n  const handleClosePostingDialog = () => {\r\n    props.setEditingPost(false);\r\n  };\r\n\r\n  const handleClickSave = () => {\r\n    setDisablePosting(true);\r\n    setDisableWriting(false);\r\n    props.handleEditPost(props.postIndex, textareaRef.current.value);\r\n    handleClosePostingDialog();\r\n  };\r\n\r\n  if (!props.postContentRef.current) return null;\r\n  return (\r\n    <Dialog open={props.editingPost} onClose={handleClosePostingDialog}>\r\n      <DialogTitle style={{ textAlign: \"center\" }}>Post Editing</DialogTitle>\r\n      <DialogContent\r\n        style={{ width: \"400px\", height: \"200px\", padding: \"8px 0px\" }}\r\n      >\r\n        <TextareaAutosize\r\n          ref={textareaRef}\r\n          rowsMin={3}\r\n          rowsMax={8}\r\n          autoFocus\r\n          disabled={disableWriting}\r\n          defaultValue={String(\r\n            props.postContentRef.current.firstChild.textContent\r\n          )}\r\n          placeholder=\"What's on your mind?\"\r\n          onInput={() => {\r\n            if (textareaRef.current.value.trim() == \"\") {\r\n              setDisablePosting(true);\r\n            } else if (disablePosting) setDisablePosting(false);\r\n          }}\r\n          style={{\r\n            width: \"100%\",\r\n            outlineStyle: \"none\",\r\n            borderStyle: \"none\",\r\n            resize: \"none\",\r\n          }}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClickSave} disabled={disablePosting}>\r\n          Save\r\n        </Button>\r\n        <Button onClick={handleClosePostingDialog}>Cancel</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default PostEditing;\r\n","E:\\sokial\\sokial\\src\\components\\home.js",[],"E:\\sokial\\sokial\\src\\components\\postsHomeSection.js",[],"E:\\sokial\\sokial\\src\\components\\profileImg.js",["198","199","200"],"import { useState, useRef, useEffect } from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\r\nimport Avatar from \"./../images/default_profile_image.png\";\r\n\r\nconst ProfileImg = (props) => {\r\n  const [fetchedImage, setFetchedImage] = useState({\r\n    isFetched: false,\r\n    img: null,\r\n  });\r\n  const [choosingImg, setChoosingImg] = useState(false);\r\n  const uploadProfileImgBtnRef = useRef(null);\r\n  const uploadedImgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    //console.log(props.profileData);\r\n    if (uploadedImgRef.current && props.profileData.profileImage) {\r\n      uploadedImgRef.current.src = props.profileData.profileImage;\r\n    } else if (uploadedImgRef.current) {\r\n      uploadedImgRef.current.src = Avatar;\r\n    }\r\n  }, [props.profileData.profileImage, uploadedImgRef, window.location.href]);\r\n\r\n  const handleSelectImg = (img) => {\r\n    // This is used when the user select an img, then he needs to confirm it or cancel.\r\n\r\n    //console.log(URL.createObjectURL(img.target.files[0]));\r\n    console.log(img.target.files[0]);\r\n    uploadedImgRef.current.src = URL.createObjectURL(img.target.files[0]);\r\n    setChoosingImg(true);\r\n  };\r\n\r\n  const handleCancelChoosing = (img) => {\r\n    // This is used when the user select an img, then he needs to confirm it or cancel.\r\n\r\n    if (!fetchedImage.img) uploadedImgRef.current.src = \" \";\r\n    else {\r\n      const src = URL.createObjectURL(fetchedImage.img);\r\n      uploadedImgRef.current.src = src;\r\n    }\r\n    setChoosingImg(false);\r\n  };\r\n\r\n  const handleConfirmImg = () => {\r\n    const formData = new FormData();\r\n    formData.append(\"blob\", uploadProfileImgBtnRef.current.files[0]);\r\n\r\n    fetch(\"/profile/set-profile-img\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    })\r\n      .then(() => {\r\n        window.location.reload();\r\n        setChoosingImg(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n        handleCancelChoosing();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div id=\"profile-img-container\">\r\n      <div id=\"profile-img-frame\" style={{ display: \"flex\" }}>\r\n        <img id=\"profile-img\" ref={uploadedImgRef} />\r\n\r\n        {props.isMyProfile ? (\r\n          <div\r\n            id=\"upload-profile-img-btn\"\r\n            onClick={() => {\r\n              uploadProfileImgBtnRef.current.click();\r\n            }}\r\n          >\r\n            <input\r\n              type=\"file\"\r\n              ref={uploadProfileImgBtnRef}\r\n              style={{ display: \"none\" }}\r\n              accept=\"image/*\"\r\n              onChange={handleSelectImg}\r\n            />\r\n            <IconButton\r\n              disableRipple\r\n              style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n              <AddAPhotoIcon />\r\n            </IconButton>\r\n          </div>\r\n        ) : null}\r\n\r\n        {choosingImg ? (\r\n          <>\r\n            <div\r\n              id=\"cancel-upload-profile-img-btn\"\r\n              onClick={handleCancelChoosing}\r\n            >\r\n              <IconButton disableRipple>\r\n                <CancelIcon />\r\n              </IconButton>\r\n            </div>\r\n            <div id=\"confirm-upload-profile-img-btn\" onClick={handleConfirmImg}>\r\n              <IconButton disableRipple>\r\n                <CheckCircleIcon />\r\n              </IconButton>\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileImg;\r\n","E:\\sokial\\sokial\\src\\components\\profilePostsOption.js",["201","202","203"],"E:\\sokial\\sokial\\src\\components\\profileFriendsOption.js",["204","205","206"],"import { Grid } from \"@material-ui/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport FriendEntryProfileFriendsOption from \"./friendEntryProfileFriendsOption.\";\r\n\r\nconst ProfileFriendsOption = ({ identity, profileData }) => {\r\n  const numToShow = 40;\r\n  const [noMoreFriends, setNoMoreFriedns] = useState(false);\r\n  const [waitingForMoreFriends, setWaitingForMoreFriends] = useState(true);\r\n  const [fetchedFriends, setFetchedFriends] = useState([]);\r\n  const [friendsDivs, setFriendsDivs] = useState([]);\r\n\r\n  const isNearToBottom = () => {\r\n    return (\r\n      document.body.getBoundingClientRect().bottom <= window.innerHeight * 5\r\n    );\r\n  };\r\n\r\n  const pushMoreFriendsToView = () => {\r\n    let leftPtr = friendsDivs.length;\r\n    let rightPtr = Math.min(fetchedFriends.length, leftPtr + numToShow);\r\n    let tmpArr = [];\r\n\r\n    for (let i = leftPtr; i < rightPtr; i++) {\r\n      tmpArr.push(\r\n        <FriendEntryProfileFriendsOption\r\n          friendData={{\r\n            id: fetchedFriends[i].id,\r\n            firstName: fetchedFriends[i].first_name,\r\n            lastName: fetchedFriends[i].last_name,\r\n            profileImgPath: fetchedFriends[i].profile_photo_path,\r\n          }}\r\n          identity={identity}\r\n          entryIndex={tmpArr.length + friendsDivs.length}\r\n        />\r\n      );\r\n    }\r\n\r\n    setWaitingForMoreFriends(false);\r\n    setFriendsDivs(friendsDivs.concat(tmpArr));\r\n  };\r\n\r\n  document.body.onscroll = () => {\r\n    console.log(\r\n      fetchedFriends.length,\r\n      \"wait: \",\r\n      waitingForMoreFriends,\r\n      noMoreFriends\r\n    );\r\n    if (!noMoreFriends && isNearToBottom() && !waitingForMoreFriends) {\r\n      setWaitingForMoreFriends(true);\r\n    }\r\n  };\r\n\r\n  // To fetch\r\n  useEffect(() => {\r\n    fetch(`/get-friends?friendsOfId=${profileData.id}`, { method: \"GET\" })\r\n      .then((res) => {\r\n        if (res.ok) return res.json();\r\n        else throw new Error(\"Can't fetch friends\");\r\n      })\r\n      .then((res) => {\r\n        console.log(\"Friends\", res);\r\n        setFetchedFriends(res.friends);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"ERROR :: \", err.message);\r\n      });\r\n  }, []);\r\n\r\n  // See if all is done\r\n  useEffect(() => {\r\n    if (friendsDivs.length === fetchedFriends.length) {\r\n      setNoMoreFriedns(true);\r\n    }\r\n  }, [friendsDivs.length]);\r\n\r\n  // To take a safe space, if there is some news in the fetchedFriends array, then may be there is more.\r\n  useEffect(() => {\r\n    setNoMoreFriedns(false);\r\n  }, [fetchedFriends.length]);\r\n\r\n  //  If waiting, go and push more entries\r\n  useEffect(() => {\r\n    if (waitingForMoreFriends && !noMoreFriends) {\r\n      pushMoreFriendsToView();\r\n    }\r\n  }, [waitingForMoreFriends]);\r\n\r\n  return (\r\n    <Grid container id=\"profile-friends-option-friends-container\" spacing={1}>\r\n      {friendsDivs}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ProfileFriendsOption;\r\n","E:\\sokial\\sokial\\src\\components\\friendEntryProfileFriendsOption..js",["207","208","209"],"import { useState, useRef, useEffect } from \"react\";\r\nimport { Grid, Button, IconButton } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport Avatar from \"./../images/default_profile_image.png\";\r\n\r\nconst FriendEntryProfileFriendsOption = ({\r\n  friendData,\r\n  entryIndex,\r\n  identity,\r\n}) => {\r\n  const [profileImg, setProfileImg] = useState(null);\r\n  const profileImgRef = useRef(null);\r\n\r\n  // Setting profile image\r\n  useEffect(() => {\r\n    if (profileImg && profileImgRef.current) {\r\n      profileImgRef.current.src = profileImg;\r\n    } else if (profileImgRef.current) {\r\n      profileImgRef.current.src = Avatar;\r\n    }\r\n  }, [profileImg, profileImgRef]);\r\n\r\n  // To fetch profile image\r\n  useEffect(() => {\r\n    if (entryIndex < 10) console.log(entryIndex);\r\n    if (friendData.profileImgPath)\r\n      // If the profile image path is not null\r\n      fetch(\r\n        `/get-profile-img/${friendData.id}?` +\r\n          new URLSearchParams({\r\n            profile_photo_path: friendData.profileImgPath,\r\n          })\r\n      )\r\n        .then((res) => {\r\n          if (res.ok) return res.blob();\r\n          else\r\n            throw new Error(\r\n              `Can't fetch profile image of the friend ${friendData.id}`\r\n            );\r\n        })\r\n        .then((img) => {\r\n          setProfileImg(URL.createObjectURL(img));\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.message);\r\n        });\r\n  }, [friendData.profileImgPath]);\r\n\r\n  return (\r\n    <Grid item className=\"friend-entry\" xs={12} sm={6} lg={6}>\r\n      <div className=\"friend-entry-left-col\">\r\n        <a href={`${window.location.origin}/profile?id=${friendData.id}`}>\r\n          <img className=\"friend-entry-profile-img\" ref={profileImgRef} />\r\n        </a>\r\n\r\n        <a\r\n          className=\"friend-entry-profile-name clickable-account-name\"\r\n          href={`${window.location.origin}/profile?id=${friendData.id}`}\r\n        >\r\n          {`${friendData.firstName} ${friendData.lastName}`}\r\n        </a>\r\n      </div>\r\n\r\n      {identity.id !== friendData.id ? (\r\n        <IconButton>\r\n          <MoreHorizIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default FriendEntryProfileFriendsOption;\r\n","E:\\sokial\\sokial\\src\\components\\postReactantsModal.js",[],"E:\\sokial\\sokial\\src\\components\\postReactantEntry.js",["210","211","212","213"],"import { useEffect, useRef, useState } from \"react\";\r\nimport Avatar from \"./../images/default_profile_image.png\";\r\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\r\n\r\nconst PostReactantEntry = (props) => {\r\n  const profileImageRef = useRef(null);\r\n  const [profileImage, setProfileImage] = useState(Avatar);\r\n\r\n  useEffect(() => {\r\n    if (props.reactantData && props.reactantData.profileImagePath) {\r\n      fetch(\r\n        `/get-profile-img/${props.reactantData.id}?` +\r\n          new URLSearchParams({\r\n            profile_image_path: props.reactantData.profileImagePath,\r\n          })\r\n      )\r\n        .then((res) => {\r\n          if (res && res.ok) return res.blob();\r\n          else {\r\n            const err = new Error(\"Can't fetch profile image\");\r\n          }\r\n        })\r\n        .then((res) => {\r\n          const img = URL.createObjectURL(res);\r\n          setProfileImage(img);\r\n          profileImageRef.current.src = img;\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.message);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (profileImageRef.current) {\r\n      profileImageRef.current.src = profileImage;\r\n    }\r\n  }, [profileImageRef.current, profileImage]);\r\n\r\n  return (\r\n    <div className=\"reactant-entry\">\r\n      <div className=\"profile-data\">\r\n        <a\r\n          className=\"clickable-profile-image-anchor\"\r\n          href={`${window.location.origin}/profile?id=${props.reactantData.id}`}\r\n        >\r\n          <img className=\"profile-image\" ref={profileImageRef} />\r\n        </a>\r\n        <a\r\n          className=\"clickable-account-name\"\r\n          href={`${window.location.origin}/profile?id=${props.reactantData.id}`}\r\n        >\r\n          <div className=\"profile-name \">{`${props.reactantData.firstName} ${props.reactantData.lastName}`}</div>\r\n        </a>\r\n      </div>\r\n      <ThumbUpAltIcon\r\n        color={\"primary\"}\r\n        style={{ alignSelf: \"center\", width: \"30px\", height: \"30px\" }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostReactantEntry;\r\n",{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":47,"column":38,"nodeType":"220","messageId":"221","endLine":47,"endColumn":40},{"ruleId":"218","severity":1,"message":"219","line":48,"column":38,"nodeType":"220","messageId":"221","endLine":48,"endColumn":40},{"ruleId":"218","severity":1,"message":"222","line":78,"column":38,"nodeType":"220","messageId":"221","endLine":78,"endColumn":40},{"ruleId":"218","severity":1,"message":"222","line":79,"column":38,"nodeType":"220","messageId":"221","endLine":79,"endColumn":40},{"ruleId":"214","replacedBy":"223"},{"ruleId":"216","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":1,"column":10,"nodeType":"227","messageId":"228","endLine":1,"endColumn":18},{"ruleId":"225","severity":1,"message":"229","line":1,"column":20,"nodeType":"227","messageId":"228","endLine":1,"endColumn":26},{"ruleId":"225","severity":1,"message":"229","line":1,"column":20,"nodeType":"227","messageId":"228","endLine":1,"endColumn":26},{"ruleId":"225","severity":1,"message":"230","line":1,"column":10,"nodeType":"227","messageId":"228","endLine":1,"endColumn":19},{"ruleId":"225","severity":1,"message":"231","line":1,"column":21,"nodeType":"227","messageId":"228","endLine":1,"endColumn":37},{"ruleId":"225","severity":1,"message":"232","line":1,"column":39,"nodeType":"227","messageId":"228","endLine":1,"endColumn":43},{"ruleId":"225","severity":1,"message":"233","line":1,"column":45,"nodeType":"227","messageId":"228","endLine":1,"endColumn":51},{"ruleId":"225","severity":1,"message":"234","line":3,"column":8,"nodeType":"227","messageId":"228","endLine":3,"endColumn":15},{"ruleId":"225","severity":1,"message":"235","line":4,"column":8,"nodeType":"227","messageId":"228","endLine":4,"endColumn":27},{"ruleId":"236","severity":1,"message":"237","line":69,"column":6,"nodeType":"238","endLine":69,"endColumn":24,"suggestions":"239"},{"ruleId":"236","severity":1,"message":"240","line":69,"column":7,"nodeType":"241","endLine":69,"endColumn":23},{"ruleId":"218","severity":1,"message":"219","line":71,"column":40,"nodeType":"220","messageId":"221","endLine":71,"endColumn":42},{"ruleId":"218","severity":1,"message":"219","line":94,"column":30,"nodeType":"220","messageId":"221","endLine":94,"endColumn":32},{"ruleId":"218","severity":1,"message":"219","line":101,"column":33,"nodeType":"220","messageId":"221","endLine":101,"endColumn":35},{"ruleId":"236","severity":1,"message":"242","line":40,"column":6,"nodeType":"238","endLine":40,"endColumn":68,"suggestions":"243"},{"ruleId":"218","severity":1,"message":"219","line":145,"column":48,"nodeType":"220","messageId":"221","endLine":145,"endColumn":50},{"ruleId":"244","severity":1,"message":"245","line":149,"column":9,"nodeType":"246","endLine":152,"endColumn":10},{"ruleId":"218","severity":1,"message":"219","line":173,"column":52,"nodeType":"220","messageId":"221","endLine":173,"endColumn":54},{"ruleId":"244","severity":1,"message":"245","line":196,"column":13,"nodeType":"246","endLine":200,"endColumn":15},{"ruleId":"225","severity":1,"message":"247","line":11,"column":10,"nodeType":"227","messageId":"228","endLine":11,"endColumn":13},{"ruleId":"236","severity":1,"message":"248","line":62,"column":6,"nodeType":"238","endLine":62,"endColumn":8,"suggestions":"249"},{"ruleId":"244","severity":1,"message":"245","line":138,"column":15,"nodeType":"246","endLine":138,"endColumn":79},{"ruleId":"218","severity":1,"message":"219","line":146,"column":32,"nodeType":"220","messageId":"221","endLine":146,"endColumn":34},{"ruleId":"244","severity":1,"message":"245","line":174,"column":15,"nodeType":"246","endLine":174,"endColumn":64},{"ruleId":"218","severity":1,"message":"219","line":185,"column":70,"nodeType":"220","messageId":"221","endLine":185,"endColumn":72},{"ruleId":"218","severity":1,"message":"219","line":200,"column":69,"nodeType":"220","messageId":"221","endLine":200,"endColumn":71},{"ruleId":"225","severity":1,"message":"226","line":1,"column":10,"nodeType":"227","messageId":"228","endLine":1,"endColumn":18},{"ruleId":"225","severity":1,"message":"250","line":9,"column":10,"nodeType":"227","messageId":"228","endLine":9,"endColumn":15},{"ruleId":"225","severity":1,"message":"251","line":3,"column":3,"nodeType":"227","messageId":"228","endLine":3,"endColumn":9},{"ruleId":"225","severity":1,"message":"252","line":4,"column":3,"nodeType":"227","messageId":"228","endLine":4,"endColumn":10},{"ruleId":"225","severity":1,"message":"253","line":6,"column":3,"nodeType":"227","messageId":"228","endLine":6,"endColumn":13},{"ruleId":"225","severity":1,"message":"233","line":7,"column":3,"nodeType":"227","messageId":"228","endLine":7,"endColumn":9},{"ruleId":"225","severity":1,"message":"254","line":12,"column":8,"nodeType":"227","messageId":"228","endLine":12,"endColumn":25},{"ruleId":"225","severity":1,"message":"255","line":15,"column":7,"nodeType":"227","messageId":"228","endLine":15,"endColumn":36},{"ruleId":"225","severity":1,"message":"256","line":16,"column":16,"nodeType":"227","messageId":"228","endLine":16,"endColumn":23},{"ruleId":"257","severity":2,"message":"258","line":31,"column":16,"nodeType":"227","messageId":"259","endLine":31,"endColumn":45},{"ruleId":"225","severity":1,"message":"230","line":3,"column":3,"nodeType":"227","messageId":"228","endLine":3,"endColumn":12},{"ruleId":"225","severity":1,"message":"231","line":4,"column":3,"nodeType":"227","messageId":"228","endLine":4,"endColumn":19},{"ruleId":"225","severity":1,"message":"232","line":5,"column":3,"nodeType":"227","messageId":"228","endLine":5,"endColumn":7},{"ruleId":"225","severity":1,"message":"260","line":10,"column":3,"nodeType":"227","messageId":"228","endLine":10,"endColumn":16},{"ruleId":"225","severity":1,"message":"261","line":15,"column":8,"nodeType":"227","messageId":"228","endLine":15,"endColumn":30},{"ruleId":"225","severity":1,"message":"254","line":16,"column":8,"nodeType":"227","messageId":"228","endLine":16,"endColumn":25},{"ruleId":"225","severity":1,"message":"230","line":2,"column":3,"nodeType":"227","messageId":"228","endLine":2,"endColumn":12},{"ruleId":"225","severity":1,"message":"231","line":3,"column":3,"nodeType":"227","messageId":"228","endLine":3,"endColumn":19},{"ruleId":"225","severity":1,"message":"232","line":4,"column":3,"nodeType":"227","messageId":"228","endLine":4,"endColumn":7},{"ruleId":"225","severity":1,"message":"233","line":5,"column":3,"nodeType":"227","messageId":"228","endLine":5,"endColumn":9},{"ruleId":"225","severity":1,"message":"262","line":6,"column":3,"nodeType":"227","messageId":"228","endLine":6,"endColumn":9},{"ruleId":"225","severity":1,"message":"263","line":7,"column":3,"nodeType":"227","messageId":"228","endLine":7,"endColumn":14},{"ruleId":"225","severity":1,"message":"264","line":8,"column":3,"nodeType":"227","messageId":"228","endLine":8,"endColumn":16},{"ruleId":"225","severity":1,"message":"260","line":9,"column":3,"nodeType":"227","messageId":"228","endLine":9,"endColumn":16},{"ruleId":"225","severity":1,"message":"265","line":1,"column":37,"nodeType":"227","messageId":"228","endLine":1,"endColumn":46},{"ruleId":"225","severity":1,"message":"230","line":2,"column":10,"nodeType":"227","messageId":"228","endLine":2,"endColumn":19},{"ruleId":"236","severity":1,"message":"266","line":40,"column":6,"nodeType":"238","endLine":40,"endColumn":8,"suggestions":"267"},{"ruleId":"244","severity":1,"message":"245","line":87,"column":9,"nodeType":"246","endLine":87,"endColumn":71},{"ruleId":"225","severity":1,"message":"268","line":9,"column":8,"nodeType":"227","messageId":"228","endLine":9,"endColumn":24},{"ruleId":"218","severity":1,"message":"219","line":46,"column":50,"nodeType":"220","messageId":"221","endLine":46,"endColumn":52},{"ruleId":"225","severity":1,"message":"269","line":9,"column":24,"nodeType":"227","messageId":"228","endLine":9,"endColumn":39},{"ruleId":"236","severity":1,"message":"242","line":24,"column":6,"nodeType":"238","endLine":24,"endColumn":76,"suggestions":"270"},{"ruleId":"244","severity":1,"message":"245","line":67,"column":9,"nodeType":"246","endLine":67,"endColumn":54},{"ruleId":"225","severity":1,"message":"271","line":6,"column":8,"nodeType":"227","messageId":"228","endLine":6,"endColumn":14},{"ruleId":"272","severity":1,"message":"273","line":35,"column":42,"nodeType":"274","messageId":"275","endLine":35,"endColumn":44},{"ruleId":"244","severity":1,"message":"245","line":38,"column":22,"nodeType":"246","endLine":38,"endColumn":39},{"ruleId":"236","severity":1,"message":"276","line":68,"column":6,"nodeType":"238","endLine":68,"endColumn":8,"suggestions":"277"},{"ruleId":"236","severity":1,"message":"278","line":75,"column":6,"nodeType":"238","endLine":75,"endColumn":26,"suggestions":"279"},{"ruleId":"236","severity":1,"message":"280","line":87,"column":6,"nodeType":"238","endLine":87,"endColumn":29,"suggestions":"281"},{"ruleId":"225","severity":1,"message":"233","line":2,"column":16,"nodeType":"227","messageId":"228","endLine":2,"endColumn":22},{"ruleId":"236","severity":1,"message":"282","line":47,"column":6,"nodeType":"238","endLine":47,"endColumn":33,"suggestions":"283"},{"ruleId":"244","severity":1,"message":"245","line":53,"column":11,"nodeType":"246","endLine":53,"endColumn":75},{"ruleId":"225","severity":1,"message":"284","line":20,"column":19,"nodeType":"227","messageId":"228","endLine":20,"endColumn":22},{"ruleId":"236","severity":1,"message":"285","line":32,"column":6,"nodeType":"238","endLine":32,"endColumn":8,"suggestions":"286"},{"ruleId":"236","severity":1,"message":"287","line":38,"column":6,"nodeType":"238","endLine":38,"endColumn":45,"suggestions":"288"},{"ruleId":"244","severity":1,"message":"245","line":47,"column":11,"nodeType":"246","endLine":47,"endColumn":66},"no-native-reassign",["289"],"no-negated-in-lhs",["290"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["289"],["290"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'TextField' is defined but never used.","'TextareaAutosize' is defined but never used.","'Grid' is defined but never used.","'Button' is defined but never used.","'Posting' is defined but never used.","'PostsProfileSection' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isMyProfile' and 'params'. Either include them or remove the dependency array.","ArrayExpression",["291"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has an unnecessary dependency: 'window.location.href'. Either exclude it or remove the dependency array. Outer scope values like 'window.location.href' aren't valid dependencies because mutating them doesn't re-render the component.",["292"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'set' is defined but never used.","React Hook useEffect has a missing dependency: 'props.postData.postImageData'. Either include it or remove the dependency array.",["293"],"'Badge' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.","'NotificationsIcon' is defined but never used.","'FriendshipNotificationsButton' is assigned a value but never used.","'setOpen' is assigned a value but never used.","no-undef","'friendshipNotificationsButton' is not defined.","undef","'DialogActions' is defined but never used.","'NotificationsContainer' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'Container' is defined but never used.","React Hook useEffect has missing dependencies: 'props.commentAuthorData.id' and 'props.commentAuthorData.profileImagePath'. Either include them or remove the dependency array.",["294"],"'generalFunctions' is defined but never used.","'setFetchedImage' is assigned a value but never used.",["295"],"'Avatar' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'profileData.id'. Either include it or remove the dependency array.",["296"],"React Hook useEffect has a missing dependency: 'fetchedFriends.length'. Either include it or remove the dependency array.",["297"],"React Hook useEffect has missing dependencies: 'noMoreFriends' and 'pushMoreFriendsToView'. Either include them or remove the dependency array.",["298"],"React Hook useEffect has missing dependencies: 'entryIndex' and 'friendData.id'. Either include them or remove the dependency array.",["299"],"'err' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.reactantData'. Either include it or remove the dependency array.",["300"],"React Hook useEffect has an unnecessary dependency: 'profileImageRef.current'. Either exclude it or remove the dependency array. Mutable values like 'profileImageRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["301"],"no-global-assign","no-unsafe-negation",{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},"Update the dependencies array to be: [isMyProfile, params]",{"range":"324","text":"325"},"Update the dependencies array to be: [identity, postingAuthorProfileImageRef]",{"range":"326","text":"327"},"Update the dependencies array to be: [props.postData.postImageData]",{"range":"328","text":"329"},"Update the dependencies array to be: [props.commentAuthorData.id, props.commentAuthorData.profileImagePath]",{"range":"330","text":"331"},"Update the dependencies array to be: [props.profileData.profileImage, uploadedImgRef]",{"range":"332","text":"333"},"Update the dependencies array to be: [profileData.id]",{"range":"334","text":"335"},"Update the dependencies array to be: [fetchedFriends.length, friendsDivs.length]",{"range":"336","text":"337"},"Update the dependencies array to be: [noMoreFriends, pushMoreFriendsToView, waitingForMoreFriends]",{"range":"338","text":"339"},"Update the dependencies array to be: [entryIndex, friendData.id, friendData.profileImgPath]",{"range":"340","text":"341"},"Update the dependencies array to be: [props.reactantData]",{"range":"342","text":"343"},"Update the dependencies array to be: [profileImage]",{"range":"344","text":"345"},[2263,2281],"[isMyProfile, params]",[1391,1453],"[identity, postingAuthorProfileImageRef]",[2264,2266],"[props.postData.postImageData]",[1249,1251],"[props.commentAuthorData.id, props.commentAuthorData.profileImagePath]",[917,987],"[props.profileData.profileImage, uploadedImgRef]",[2145,2147],"[profileData.id]",[2299,2319],"[fetchedFriends.length, friendsDivs.length]",[2677,2700],"[noMoreFriends, pushMoreFriendsToView, waitingForMoreFriends]",[1455,1482],"[entryIndex, friendData.id, friendData.profileImgPath]",[1047,1049],"[props.reactantData]",[1175,1214],"[profileImage]"]