[{"E:\\sokial\\sokial\\src\\index.js":"1","E:\\sokial\\sokial\\src\\App.js":"2","E:\\sokial\\sokial\\src\\reportWebVitals.js":"3","E:\\sokial\\sokial\\src\\components\\signup.js":"4","E:\\sokial\\sokial\\src\\components\\login.js":"5","E:\\sokial\\sokial\\src\\components\\profile.js":"6","E:\\sokial\\sokial\\src\\components\\posting.js":"7","E:\\sokial\\sokial\\src\\components\\post.js":"8","E:\\sokial\\sokial\\src\\components\\postsProfileSection.js":"9","E:\\sokial\\sokial\\src\\components\\profileHeader.js":"10","E:\\sokial\\sokial\\src\\components\\mainBar.js":"11","E:\\sokial\\sokial\\src\\components\\FriendshipNotificationsButton.js":"12","E:\\sokial\\sokial\\src\\components\\friendshipNotificationsButton.js":"13","E:\\sokial\\sokial\\src\\components\\notificationsContainer.js":"14","E:\\sokial\\sokial\\src\\components\\friendshipNotifEntry.js":"15","E:\\sokial\\sokial\\src\\usable functions\\endpoint-related.js":"16","E:\\sokial\\sokial\\src\\components\\postCommentsSection.js":"17","E:\\sokial\\sokial\\src\\usable functions\\general.js":"18","E:\\sokial\\sokial\\src\\components\\postComment.js":"19"},{"size":231,"mtime":1611459015441,"results":"20","hashOfConfig":"21"},{"size":3383,"mtime":1611742446816,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":11531,"mtime":1611632160414,"results":"24","hashOfConfig":"21"},{"size":3163,"mtime":1611570261559,"results":"25","hashOfConfig":"21"},{"size":5011,"mtime":1611903833463,"results":"26","hashOfConfig":"21"},{"size":2392,"mtime":1612054288110,"results":"27","hashOfConfig":"21"},{"size":1703,"mtime":1612061015827,"results":"28","hashOfConfig":"21"},{"size":5037,"mtime":1612060968541,"results":"29","hashOfConfig":"21"},{"size":2240,"mtime":1611902480264,"results":"30","hashOfConfig":"21"},{"size":1534,"mtime":1611910582377,"results":"31","hashOfConfig":"21"},{"size":884,"mtime":1611910578522,"results":"32","hashOfConfig":"21"},{"size":4922,"mtime":1612015943120,"results":"33","hashOfConfig":"21"},{"size":248,"mtime":1611924095031,"results":"34","hashOfConfig":"21"},{"size":1279,"mtime":1612014911088,"results":"35","hashOfConfig":"21"},{"size":1375,"mtime":1611999343698,"results":"36","hashOfConfig":"21"},{"size":6553,"mtime":1612061381352,"results":"37","hashOfConfig":"21"},{"size":261,"mtime":1612055288154,"results":"38","hashOfConfig":"21"},{"size":1220,"mtime":1612074253545,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"f5302e",{"filePath":"43","messages":"44","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":1,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"E:\\sokial\\sokial\\src\\index.js",[],["93","94"],"E:\\sokial\\sokial\\src\\App.js",["95","96","97","98","99","100","101","102","103","104"],"import \"./App.scss\";\r\nimport Signup from \"./components/signup\";\r\nimport Login from \"./components/login\";\r\nimport { Link, Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\r\nimport Profile from \"./components/profile\";\r\nimport Posting from \"./components/posting\";\r\nimport Post from \"./components/post\";\r\nimport MainBar from \"./components/mainBar\";\r\nimport { useState, Component } from \"react\";\r\n\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nconst Sokial = (props) => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          path=\"/profile\"\r\n          component={() => <Profile identity={props.identity} />}\r\n        />\r\n        <Route path=\"/posting\" component={Posting} />\r\n        <Route path=\"/post\" component={Post} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n  /* return (\r\n    <>\r\n      <button\r\n        onClick={async () => {\r\n          await fetch(\"/logout\", {\r\n            method: \"post\",\r\n          });\r\n          props.loggedOut();\r\n        }}\r\n      >\r\n        Logout\r\n      </button>\r\n      <br />\r\n      <h3>\r\n        Welcome to home, {props.identity.firstName} {props.identity.lastName}\r\n      </h3>\r\n    </>\r\n  ); */\r\n};\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.gotUserData = this.gotUserData.bind(this);\r\n    this.handleLogout = this.handleLogout.bind(this);\r\n\r\n    this.state = {\r\n      identity: null,\r\n      authChecked: false,\r\n    };\r\n  }\r\n\r\n  gotUserData(data) {\r\n    this.setState({ identity: data });\r\n    window.location.replace(\"/home\");\r\n  }\r\n  async handleLogout() {\r\n    await fetch(\"/logout\", {\r\n      method: \"post\",\r\n    });\r\n\r\n    window.location.replace(\"/login\");\r\n    this.setState({ identity: null });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let res = await fetch(\"/about-auth\", { method: \"GET\" });\r\n    res = await res.json();\r\n\r\n    if (res.auth) {\r\n      if (\r\n        window.location.pathname == \"/login\" ||\r\n        window.location.pathname == \"/signup\"\r\n      )\r\n        window.location.replace(\"/home\");\r\n      this.setState({ identity: res.userData });\r\n    } else {\r\n      if (window.location.pathname == \"/home\")\r\n        window.location.replace(\"/login\");\r\n    }\r\n\r\n    this.setState({ authChecked: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.authChecked)\r\n      return (\r\n        <Router>\r\n          <MainBar logout={this.handleLogout} identity={this.state.identity} />\r\n\r\n          <Switch>\r\n            <Route\r\n              path=\"/login\"\r\n              component={() => <Login gotUserData={this.gotUserData} />}\r\n            />\r\n            <Route\r\n              path=\"/signup\"\r\n              component={() => <Signup gotUserData={this.gotUserData} />}\r\n            />\r\n\r\n            <Route\r\n              path=\"/*\"\r\n              component={() => (\r\n                <Sokial\r\n                  logout={this.handleLogout}\r\n                  identity={this.state.identity}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/home\"\r\n              component={() => (\r\n                <Sokial\r\n                  loggedOut={this.handleLogout}\r\n                  identity={this.state.identity}\r\n                />\r\n              )}\r\n            />\r\n          </Switch>\r\n        </Router>\r\n      );\r\n    else return null;\r\n  }\r\n}\r\nexport default App;\r\n","E:\\sokial\\sokial\\src\\reportWebVitals.js",[],["105","106"],"E:\\sokial\\sokial\\src\\components\\signup.js",["107","108"],"import { useState, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\n\r\n/*\r\nTODO :: Show and handle invalidation of account creation\r\n*/\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { countries } from \"../data-stores/login and signup.json\";\r\n\r\nconst maxNameLen = 20,\r\n  minNameLen = 2,\r\n  maxPassLen = 20,\r\n  minPassLen = 6,\r\n  maxCityLen = 20,\r\n  minCityLen = 2;\r\n\r\nconst validationSchema = yup.object({\r\n  fname: yup\r\n    .string()\r\n    .min(\r\n      minNameLen,\r\n      `First name should be of minimum ${minNameLen} characters length`\r\n    )\r\n    .max(\r\n      maxNameLen,\r\n      `First name should be of maximum ${maxNameLen} characters length`\r\n    )\r\n    .required(\"First name is required\"),\r\n\r\n  lname: yup\r\n    .string()\r\n    .min(\r\n      minNameLen,\r\n      `Last name should be of minimum ${minNameLen} characters length`\r\n    )\r\n    .max(\r\n      maxNameLen,\r\n      `Last name should be of maximum ${maxNameLen} characters length`\r\n    )\r\n    .required(\"Last name is required\"),\r\n\r\n  email: yup\r\n    .string()\r\n    .email(\"This email is invalid\")\r\n    .required(\"Email is required\"),\r\n\r\n  password: yup\r\n    .string()\r\n    .min(\r\n      minPassLen,\r\n      `Password should be of minimum ${minPassLen} characters length`\r\n    )\r\n    .max(\r\n      maxPassLen,\r\n      `Password should be of maximum ${maxPassLen} characters length`\r\n    )\r\n    .required(\"Password is required\"),\r\n\r\n  gender: yup.string().required(\"Gender is required\"),\r\n\r\n  birthday: yup.string().required(\"Birth day is required\"),\r\n  birthmonth: yup.string().required(\"Birth month is required\"),\r\n  birthyear: yup.string().required(\"Birth year is required\"),\r\n\r\n  country: yup.string().required(\"Country is required\"),\r\n  city: yup\r\n    .string()\r\n    .min(\r\n      minCityLen,\r\n      `City should be of minimum ${minPassLen} characters length`\r\n    )\r\n    .max(\r\n      maxCityLen,\r\n      `City should be of maximum ${maxPassLen} characters length`\r\n    )\r\n    .required(\"City is required\"),\r\n});\r\n\r\nconst Birthdate = (props) => {\r\n  const minPossibleYear = 1900;\r\n  const date = new Date();\r\n\r\n  const years = [],\r\n    days = Array.from(Array(31).keys()).map((x) => {\r\n      return { label: String(x + 1), value: x + 1 };\r\n    }),\r\n    monthes = Array.from(Array(12).keys()).map((x) => {\r\n      return { label: String(x + 1), value: x + 1 };\r\n    });\r\n  for (let i = date.getFullYear(); i >= minPossibleYear; i--)\r\n    years.push({\r\n      label: String(i),\r\n      value: i,\r\n    });\r\n\r\n  return (\r\n    <FormControl>\r\n      <Autocomplete\r\n        id=\"birthday\"\r\n        name=\"birthday\"\r\n        style={{ width: 300 }}\r\n        options={days}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => {\r\n          return (\r\n            <TextField\r\n              error={\r\n                props.formik.touched.birthday &&\r\n                Boolean(props.formik.errors.birthday)\r\n              }\r\n              helperText={\r\n                props.formik.touched.birthday && props.formik.errors.birthday\r\n              }\r\n              {...params}\r\n              label=\"Day of birth\"\r\n              variant=\"outlined\"\r\n            />\r\n          );\r\n        }}\r\n        onChange={async (e, newday) => {\r\n          if (newday) props.formik.values.birthday = newday.value;\r\n          else props.formik.values.birthday = \"\";\r\n          await props.formik.handleChange(\"birthday\");\r\n        }}\r\n        error={\r\n          props.formik.touched.birthday && Boolean(props.formik.errors.birthday)\r\n        }\r\n        helperText={\r\n          props.formik.touched.birthday && props.formik.errors.birthday\r\n        }\r\n      />\r\n      <Autocomplete\r\n        id=\"birthmonth\"\r\n        name=\"birthmonth\"\r\n        style={{ width: 300 }}\r\n        options={monthes}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => {\r\n          return (\r\n            <TextField\r\n              error={\r\n                props.formik.touched.birthmonth &&\r\n                Boolean(props.formik.errors.birthmonth)\r\n              }\r\n              helperText={\r\n                props.formik.touched.birthmonth &&\r\n                props.formik.errors.birthmonth\r\n              }\r\n              {...params}\r\n              label=\"Month of birth\"\r\n              variant=\"outlined\"\r\n            />\r\n          );\r\n        }}\r\n        onChange={async (e, newmonth) => {\r\n          if (newmonth) props.formik.values.birthmonth = newmonth.value;\r\n          else props.formik.values.birthmonth = \"\";\r\n          await props.formik.handleChange(\"birthmonth\");\r\n        }}\r\n        error={\r\n          props.formik.touched.birthmonth &&\r\n          Boolean(props.formik.errors.birthmonth)\r\n        }\r\n        helperText={\r\n          props.formik.touched.birthmonth && props.formik.errors.birthmonth\r\n        }\r\n      />\r\n\r\n      <Autocomplete\r\n        id=\"birthyear\"\r\n        name=\"birthyear\"\r\n        style={{ width: 300 }}\r\n        options={years}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => {\r\n          return (\r\n            <TextField\r\n              error={\r\n                props.formik.touched.birthyear &&\r\n                Boolean(props.formik.errors.birthyear)\r\n              }\r\n              helperText={\r\n                props.formik.touched.birthyear && props.formik.errors.birthyear\r\n              }\r\n              {...params}\r\n              label=\"Year of birth\"\r\n              variant=\"outlined\"\r\n            />\r\n          );\r\n        }}\r\n        onChange={async (e, newyear) => {\r\n          if (newyear) props.formik.values.birthyear = newyear.value;\r\n          else props.formik.values.birthyear = \"\";\r\n          await props.formik.handleChange(\"birthyear\");\r\n        }}\r\n        error={\r\n          props.formik.touched.birthyear &&\r\n          Boolean(props.formik.errors.birthyear)\r\n        }\r\n        helperText={\r\n          props.formik.touched.birthyear && props.formik.errors.birthyear\r\n        }\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst Signup = (props) => {\r\n  // Redirection to 'home' is a token recognised\r\n  if (document.cookie.indexOf(\"; token\") > -1) {\r\n    window.location.replace(\"/home\");\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      fname: \"\",\r\n      lname: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      birthday: \"\",\r\n      birthmonth: \"\",\r\n      birthyear: \"\",\r\n      gender: \"\",\r\n      country: \"\",\r\n      city: \"\",\r\n    },\r\n\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      const user = {\r\n        fName: values.fname,\r\n        lName: values.lname,\r\n        email: values.email,\r\n        password: values.password,\r\n        country: values.country,\r\n        city: values.city,\r\n        gender: values.gender,\r\n        dob: values.birthyear + \"-\" + values.birthmonth + \"-\" + values.birthday,\r\n      };\r\n\r\n      try {\r\n        const res = await fetch(\"/signup\", {\r\n          method: \"post\",\r\n          body: JSON.stringify(user),\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n        const resJson = await res.json();\r\n        if (!resJson.valid) {\r\n          console.log(resJson.message);\r\n        } else {\r\n          // valid request\r\n          props.gotUserData(resJson.userData);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n\r\n      console.log(values);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <FormControl>\r\n        <TextField\r\n          id=\"in-txt-fname\"\r\n          name=\"fname\"\r\n          label=\"First Name\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.fname && Boolean(formik.errors.fname)}\r\n          helperText={formik.touched.fname && formik.errors.fname}\r\n        />\r\n        <TextField\r\n          id=\"in-txt-lname\"\r\n          name=\"lname\"\r\n          label=\"Last Name\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.lname && Boolean(formik.errors.lname)}\r\n          helperText={formik.touched.lname && formik.errors.lname}\r\n        />\r\n        <TextField\r\n          id=\"in-txt-email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n        />\r\n        <TextField\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.password && Boolean(formik.errors.password)}\r\n          helperText={formik.touched.password && formik.errors.password}\r\n        />\r\n\r\n        <FormControl\r\n          component=\"fieldset\"\r\n          error={formik.touched.gender && Boolean(formik.errors.gender)}\r\n          helperText={formik.touched.gender && formik.errors.gender}\r\n        >\r\n          <RadioGroup name=\"gender\" row onChange={formik.handleChange}>\r\n            <FormControlLabel\r\n              value=\"m\"\r\n              control={<Radio />}\r\n              label=\"Male\"\r\n              labelPlacement=\"top\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"f\"\r\n              control={<Radio />}\r\n              label=\"Female\"\r\n              labelPlacement=\"top\"\r\n            />\r\n            <FormHelperText\r\n              disabled={formik.touched.gender && Boolean(formik.errors.gender)}\r\n            >\r\n              {formik.errors.gender}\r\n            </FormHelperText>\r\n          </RadioGroup>\r\n        </FormControl>\r\n\r\n        <Birthdate formik={formik} />\r\n\r\n        <Autocomplete\r\n          id=\"country\"\r\n          style={{ width: 300 }}\r\n          name=\"country\"\r\n          options={countries}\r\n          autoHighlight\r\n          getOptionLabel={(option) => option.label}\r\n          renderInput={(params) => {\r\n            return (\r\n              <TextField\r\n                {...params}\r\n                label=\"Choose a country\"\r\n                variant=\"outlined\"\r\n                error={formik.touched.country && Boolean(formik.errors.country)}\r\n                helperText={formik.touched.country && formik.errors.country}\r\n              />\r\n            );\r\n          }}\r\n          onChange={(e, newcountry) => {\r\n            if (newcountry) formik.values.country = newcountry.code;\r\n            else formik.values.country = \"\";\r\n            formik.handleChange(\"country\");\r\n          }}\r\n        />\r\n        <TextField\r\n          id=\"city\"\r\n          name=\"city\"\r\n          label=\"City\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.city && Boolean(formik.errors.city)}\r\n          helperText={formik.touched.city && formik.errors.city}\r\n        />\r\n\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          SignUp\r\n        </Button>\r\n        <small>\r\n          <span style={{ color: \"gray\" }}>already have an account? </span>\r\n          <a href=\"\\login\">login</a>\r\n        </small>\r\n      </FormControl>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","E:\\sokial\\sokial\\src\\components\\login.js",["109"],"import { useState, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\n\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\nconst maxPassLen = 20,\r\n  minPassLen = 6;\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email(\"This email is invalid\")\r\n    .required(\"Email is required\"),\r\n\r\n  password: yup\r\n    .string()\r\n    .min(\r\n      minPassLen,\r\n      `Password should be of minimum ${minPassLen} characters length`\r\n    )\r\n    .max(\r\n      maxPassLen,\r\n      `Password should be of maximum ${maxPassLen} characters length`\r\n    )\r\n    .required(\"Password is required\"),\r\n});\r\n\r\nconst Login = (props) => {\r\n  // Redirection to 'home' is a token recognised\r\n  /*if (document.cookie.indexOf(\"; token\") > -1) {\r\n    window.location.replace(\"/home\");\r\n    // TODO :: Get a way to enforce not show Login component\r\n  }*/\r\n\r\n  const [loginError, setLoginError] = useState(null);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      const user = {\r\n        email: values.email,\r\n        password: values.password,\r\n      };\r\n\r\n      try {\r\n        const res = await fetch(\"/login\", {\r\n          method: \"post\",\r\n          body: JSON.stringify(user),\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n        const resJson = await res.json();\r\n        if (!resJson.valid) {\r\n          setLoginError({ message: resJson.message });\r\n          console.log(resJson.message);\r\n        } else {\r\n          // valid request\r\n          props.gotUserData(resJson.userData);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form id=\"login-form\" onSubmit={formik.handleSubmit}>\r\n      <FormControl error={loginError}>\r\n        <FormHelperText disabled={loginError}>\r\n          {loginError && loginError.message}\r\n        </FormHelperText>\r\n        <TextField\r\n          id=\"in-txt-email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n        />\r\n        <TextField\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.password && Boolean(formik.errors.password)}\r\n          helperText={formik.touched.password && formik.errors.password}\r\n        />\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Login\r\n        </Button>\r\n        <small>\r\n          <span style={{ color: \"gray\" }}>want to create an account? </span>\r\n          <a href=\"\\signup\">signup</a>\r\n        </small>\r\n      </FormControl>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","E:\\sokial\\sokial\\src\\components\\profile.js",["110","111","112","113","114"],"import { TextField, TextareaAutosize, Grid, Button } from \"@material-ui/core\";\r\nimport ProfileHeader from \"./profileHeader\";\r\nimport Posting from \"./posting\";\r\nimport PostsProfileSection from \"./postsProfileSection\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst Profile = (props) => {\r\n  const [profileData, setProfileData] = useState(null);\r\n  const [friendshipRel, setFriendshipRel] = useState(null);\r\n\r\n  // Get the userId in the path (want to get this profile)\r\n  const params = new URLSearchParams(window.location.search);\r\n\r\n  if (params.get(\"id\") === null) {\r\n    // then it's my profile\r\n    window.location.replace(\r\n      `${window.location.origin}/profile?id=${props.identity.id}`\r\n    );\r\n  }\r\n\r\n  // Friendship related functions\r\n  const friendshipRelatedFunctions = {};\r\n  friendshipRelatedFunctions.handleAddFriendClick = () => {\r\n    fetch(`/friendship-request/${params.get(\"id\")}`, { method: \"POST\" })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(res.message);\r\n        window.location.reload();\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  friendshipRelatedFunctions.handleAcceptFriendship = () => {\r\n    fetch(`/friendship-request/accept/${params.get(\"id\")}`, { method: \"POST\" })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(res.message);\r\n        window.location.reload();\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  friendshipRelatedFunctions.handleUnrequestFriendship = () => {\r\n    fetch(`/friendship-request/${params.get(\"id\")}`, { method: \"DELETE\" })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(res.message);\r\n        window.location.reload();\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  friendshipRelatedFunctions.handleRejectFriendship = () => {\r\n    fetch(`/friendship-request/${params.get(\"id\")}`, { method: \"DELETE\" })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(res.message);\r\n        window.location.reload();\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  friendshipRelatedFunctions.handleUnfriendClick = () => {\r\n    fetch(`/friends/unfriend/${params.get(\"id\")}`, { method: \"DELETE\" })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(res.message);\r\n        window.location.reload();\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  // Get basic data of current profile\r\n  useEffect(() => {\r\n    fetch(\r\n      `/get-basic-user-data/${params.get(\"id\")}?` +\r\n        new URLSearchParams({\r\n          getFriendshipRel: !isMyProfile,\r\n        }),\r\n      {\r\n        method: \"GET\",\r\n      }\r\n    )\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        if (!res.valid) throw new Error(res.message);\r\n        else {\r\n          setProfileData(res.userData);\r\n          setFriendshipRel(res.friendshipRel);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n  }, []);\r\n\r\n  const isMyProfile = params.get(\"id\") == props.identity.id;\r\n\r\n  if (profileData === null || (!isMyProfile && !friendshipRel)) return null;\r\n  else\r\n    return (\r\n      <div id=\"profile\">\r\n        <ProfileHeader\r\n          profileData={profileData}\r\n          isMyProfile={isMyProfile}\r\n          areFriends={isMyProfile ? undefined : friendshipRel.areFriends}\r\n          thereIsFrReq={\r\n            friendshipRel &&\r\n            (friendshipRel.friendshipReqSenderId ||\r\n              friendshipRel.friendshipReqReceiverId)\r\n          }\r\n          didISendFrReq={\r\n            isMyProfile\r\n              ? undefined\r\n              : friendshipRel.friendshipReqSenderId === props.identity.id\r\n          }\r\n          friendshipRelatedFunctions={friendshipRelatedFunctions}\r\n        />\r\n        <Grid\r\n          id=\"profile-two-colums\"\r\n          direction=\"row\"\r\n          justify={\"space-evenly\"}\r\n          container\r\n        >\r\n          <Grid id=\"profile-left-column\" item sm={5} xs={12}>\r\n            <div\r\n              id=\"profile-posts-about-section\"\r\n              className=\"profile-posts-section\"\r\n              item\r\n            >\r\n              About\r\n            </div>\r\n            <div\r\n              id=\"profile-posts-photos-section\"\r\n              className=\"profile-posts-section\"\r\n              item\r\n            >\r\n              Photos\r\n            </div>\r\n            <div\r\n              id=\"profile-posts-friends-section\"\r\n              className=\"profile-posts-section\"\r\n              item\r\n            >\r\n              Friends\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid id=\"profile-right-column\" item sm={6} xs={12}>\r\n            <Posting\r\n              identity={props.identity}\r\n              isMyProfile={isMyProfile}\r\n              profileData={profileData}\r\n            />\r\n            <PostsProfileSection\r\n              identity={props.identity}\r\n              isMyProfile={isMyProfile}\r\n              profileId={params.get(\"id\")}\r\n              profileData={profileData}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","E:\\sokial\\sokial\\src\\components\\posting.js",["115","116","117"],"import {\r\n  TextField,\r\n  TextareaAutosize,\r\n  Grid,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useFormik } from \"formik\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nconst Posting = (props) => {\r\n  /*\r\n  TODO :: Save the textarea if no posting or refreshing happened\r\n  */\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const textareaRef = useRef(null);\r\n\r\n  const handleOpenPostingDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n  const handleClosePostingDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleClickPost = async () => {\r\n    const D = new Date();\r\n    const res = await fetch(\"/post\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n      body: JSON.stringify({\r\n        content: textareaRef.current.value,\r\n        privacy: 5 /* TODO:: Update  */,\r\n        timestamp: `${D.getFullYear()}-${\r\n          D.getMonth() + 1\r\n        }-${D.getDate()} ${D.getHours()}-${D.getMinutes()}-${D.getSeconds()} `,\r\n      }),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      /*\r\n        TODO:: Handle posting failure\r\n      */\r\n    } else {\r\n      console.log(\"DONEEE\");\r\n      setOpenDialog(false);\r\n    }\r\n  };\r\n\r\n  if (!props.isMyProfile) return null;\r\n  return (\r\n    <div id=\"profile-posting-section\" className=\"profile-posts-section\">\r\n      <div id=\"profile-posting-header\">\r\n        <div\r\n          id=\"profile-wanna-posting-textarea\"\r\n          onClick={handleOpenPostingDialog}\r\n        ></div>\r\n      </div>\r\n      <Dialog open={openDialog} onClose={handleClosePostingDialog}>\r\n        <DialogTitle style={{ textAlign: \"center\" }}>Create post</DialogTitle>\r\n        <DialogContent\r\n          style={{ width: \"400px\", height: \"200px\", padding: \"8px 0px\" }}\r\n        >\r\n          <TextareaAutosize\r\n            ref={textareaRef}\r\n            rowsMin={3}\r\n            rowsMax={8}\r\n            autoFocus\r\n            placeholder=\"What's on your mind?\"\r\n            style={{\r\n              width: \"100%\",\r\n              outlineStyle: \"none\",\r\n              borderStyle: \"none\",\r\n              resize: \"none\",\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClickPost}>Post</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posting;\r\n","E:\\sokial\\sokial\\src\\components\\post.js",["118","119"],"import { TextField, TextareaAutosize, Grid, Button } from \"@material-ui/core\";\r\nimport PostCommentsSections from \"./postCommentsSection\";\r\nimport { useState } from \"react\";\r\n\r\nconst Post = (props) => {\r\n  const [openCommentsSection, setOpenCommentsSection] = useState(false);\r\n\r\n  const handleToggleLike = () => {\r\n    fetch(\r\n      `/post/react/${props.id}?` + new URLSearchParams({ reaction_type: \"1\" }),\r\n      { method: \"POST\" }\r\n    ).then((res) => {\r\n      if (!res.ok) throw new Error();\r\n    });\r\n\r\n    props.toggleReaction(props.postIndex, props.myReactionType ? null : \"1\");\r\n  };\r\n\r\n  return (\r\n    <Grid id=\"tmp-post-container\">\r\n      <div className=\"post\">\r\n        <div className=\"post-header\">\r\n          <div className=\"post-identity-container\">\r\n            <div className=\"post-profile-photo\" />\r\n            <small style={{ fontWeight: \"bold\" }}>{props.autherFullName}</small>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"post-content\">{props.content}</div>\r\n        <div className=\"post-footer\">\r\n          <Button\r\n            onClick={handleToggleLike}\r\n            color={props.myReactionType ? \"secondary\" : \"default\"}\r\n            variant={props.myReactionType ? \"contained\" : \"default\"}\r\n          >\r\n            Like\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              setOpenCommentsSection(!openCommentsSection);\r\n            }}\r\n          >\r\n            Comment\r\n          </Button>\r\n        </div>\r\n        <PostCommentsSections\r\n          identity={props.identity}\r\n          postId={props.id}\r\n          openCommentsSection={openCommentsSection}\r\n        />\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","E:\\sokial\\sokial\\src\\components\\postsProfileSection.js",[],"E:\\sokial\\sokial\\src\\components\\profileHeader.js",["120","121","122"],"import { TextField, TextareaAutosize, Grid, Button } from \"@material-ui/core\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\n\r\nconst ProfileHeader = (props) => {\r\n  const friendshipButtonsAttr = {\r\n    variant: \"outlined\",\r\n    color: \"primary\",\r\n  };\r\n\r\n  const friendshipRelButton = props.isMyProfile ? null : props.areFriends ? (\r\n    <Button\r\n      {...friendshipButtonsAttr}\r\n      startIcon={<RemoveCircleIcon />}\r\n      onClick={props.friendshipRelatedFunctions.handleUnfriendClick}\r\n    >\r\n      Unfriend\r\n    </Button>\r\n  ) : !props.thereIsFrReq ? (\r\n    <Button\r\n      {...friendshipButtonsAttr}\r\n      startIcon={<AddCircleIcon />}\r\n      onClick={props.friendshipRelatedFunctions.handleAddFriendClick}\r\n    >\r\n      Add Friend\r\n    </Button>\r\n  ) : props.didISendFrReq ? (\r\n    <Button\r\n      {...friendshipButtonsAttr}\r\n      startIcon={<CancelIcon />}\r\n      onClick={props.friendshipRelatedFunctions.handleUnrequestFriendship}\r\n    >\r\n      Unrequest friendship\r\n    </Button>\r\n  ) : (\r\n    <Button {...friendshipButtonsAttr} startIcon={<CheckCircleIcon />}>\r\n      Accept friendship\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <div id=\"profile-header-div\">\r\n      <div id=\"profile-cover-container\"></div>\r\n      <div id=\"profile-img-container\">\r\n        <div id=\"profile-img-frame\"></div>\r\n      </div>\r\n      <div id=\"profile-name-container\">{`${props.profileData.firstName} ${props.profileData.lastName}`}</div>\r\n      <div id=\"profile-friendship-buttons-div\">{friendshipRelButton}</div>\r\n      <div id=\"profile-header-options-container\">\r\n        <Button id=\"profile-header-posts-option-btn\" size=\"large\">\r\n          Posts\r\n        </Button>\r\n        <Button id=\"profile-header-about-option-btn\" size=\"large\">\r\n          About\r\n        </Button>\r\n        <Button id=\"profile-header-friends-option-btn\" size=\"large\">\r\n          Friends\r\n        </Button>\r\n        <Button id=\"profile-header-photos-option-btn\" size=\"large\">\r\n          Photos\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileHeader;\r\n","E:\\sokial\\sokial\\src\\components\\mainBar.js",["123","124","125","126"],"import { NavLink } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Badge } from \"@material-ui/core\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport FriendshipNotificationsButton from \"./friendshipNotificationsButton\";\r\n\r\nconst MainBar = (props) => {\r\n  if (props.identity == null) {\r\n    return (\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar id=\"mainbar-notlogged-toolbar\">\r\n          <Typography variant=\"h6\">Sokial</Typography>\r\n          <div id=\"mainbar-notlogged-buttons\">\r\n            <Button color=\"inherit\">\r\n              <NavLink to=\"/login\" className=\"navlink-button\">\r\n                Login\r\n              </NavLink>\r\n            </Button>\r\n            <Button color=\"inherit\" href=\"/signup\" aria-current=\"page\">\r\n              <NavLink to=\"/Signup\" className=\"navlink-button\">\r\n                Signup\r\n              </NavLink>\r\n            </Button>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  } else {\r\n    return (\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar id=\"mainbar-logged-toolbar\">\r\n          <Typography variant=\"h6\">Sokial</Typography>\r\n\r\n          <FriendshipNotificationsButton identity={props.identity} />\r\n\r\n          <Button id=\"\" color=\"inherit\" onClick={props.logout}>\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MainBar;\r\n","E:\\sokial\\sokial\\src\\components\\FriendshipNotificationsButton.js",["127","128","129","130","131","132","133","134"],"E:\\sokial\\sokial\\src\\components\\friendshipNotificationsButton.js",["135","136","137","138","139","140"],"import { Component, createRef } from \"react\";\r\nimport {\r\n  TextField,\r\n  TextareaAutosize,\r\n  Grid,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  Badge,\r\n} from \"@material-ui/core\";\r\nimport FriendshipNotifEntry from \"./friendshipNotifEntry\";\r\nimport NotificationsContainer from \"./notificationsContainer\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nclass FriendshipNotificationsButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      openDialog: false,\r\n\r\n      noMoreNotif: false,\r\n      fetchedNotif: [],\r\n      shownNotifDivs: [],\r\n    };\r\n\r\n    this.dialogRef = createRef(null);\r\n\r\n    this.numNotifToFetch = 15; // It's a parameter that can be changed\r\n    this.numNotifToPush = 5; // It's a parameter that can be changed\r\n\r\n    this.handleClickFriendshipNotif = this.handleClickFriendshipNotif.bind(\r\n      this\r\n    );\r\n    this.pushToShownNotif = this.pushToShownNotif.bind(this);\r\n    this.handleWaitingForNotif = this.handleWaitingForNotif.bind(this);\r\n    this.fetchNewNotif = this.fetchNewNotif.bind(this);\r\n  }\r\n\r\n  // Fetching Friendship Notifications\r\n  fetchNewNotif() {\r\n    const escapeNotif = this.state.fetchedNotif.length;\r\n    const limitNotif = this.numNotifToFetch;\r\n\r\n    console.log(`${escapeNotif} ${limitNotif}`);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\r\n        `/friendship-request/requests?` +\r\n          new URLSearchParams({\r\n            asreceiver: true,\r\n            esc: escapeNotif,\r\n            limit: limitNotif,\r\n          }),\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      )\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((res) => {\r\n          if (!res.valid) {\r\n            // TODO :: Handle invalid fetch\r\n          } else {\r\n            console.log(res.data);\r\n            return resolve(res.data);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  handleClickFriendshipNotif() {\r\n    this.setState({\r\n      openDialog: !this.state.openDialog,\r\n    });\r\n  }\r\n\r\n  pushToShownNotif() {\r\n    const tmpNotifDivs = [];\r\n\r\n    let toPushLeft = this.state.shownNotifDivs.length;\r\n    let toPushRight = Math.min(\r\n      toPushLeft + this.numNotifToPush,\r\n      this.state.fetchedNotif.length\r\n    );\r\n\r\n    for (let i = toPushLeft; i < toPushRight; i++)\r\n      tmpNotifDivs.push(\r\n        <FriendshipNotifEntry\r\n          id={this.state.fetchedNotif[i].id}\r\n          fullName={`${this.state.fetchedNotif[i].firstName} ${this.state.fetchedNotif[i].lastName}`}\r\n        />\r\n      );\r\n\r\n    this.setState({\r\n      shownNotifDivs: this.state.shownNotifDivs.concat(tmpNotifDivs),\r\n    });\r\n  }\r\n\r\n  handleWaitingForNotif() {\r\n    this.setState({ waitingForNotif: true });\r\n\r\n    if (this.state.fetchedNotif.length === this.state.shownNotifDivs.length) {\r\n      // Need to fetch new notif\r\n      this.fetchNewNotif().then((notif) => {\r\n        //console.log(\"Fetched notif >> \", notif);\r\n        if (notif.length === 0) {\r\n          this.setState({ noMoreNotif: true });\r\n        } else {\r\n          this.setState({\r\n            fetchedNotif: this.state.fetchedNotif.concat(notif),\r\n          });\r\n          this.pushToShownNotif();\r\n        }\r\n      });\r\n    } else {\r\n      this.pushToShownNotif();\r\n    }\r\n\r\n    this.fetching = false;\r\n    this.setState({ waitingForNotif: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleWaitingForNotif();\r\n  }\r\n\r\n  render() {\r\n    let endDiv = null;\r\n    if (this.state.noMoreNotif === false && this.state.waitingForNotif)\r\n      endDiv = (\r\n        <div id=\"notif-profile-section-loading-div\">\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    else if (this.state.noMoreNotif === false) {\r\n      endDiv = (\r\n        <div>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={this.handleWaitingForNotif}\r\n          >\r\n            Load more...\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"notifbtn-with-container\">\r\n        <IconButton color=\"inherit\" onClick={this.handleClickFriendshipNotif}>\r\n          <Badge badgeContent={3} color=\"secondary\" variant=\"dot\">\r\n            <PersonAddIcon />\r\n          </Badge>\r\n        </IconButton>\r\n\r\n        <Dialog\r\n          open={this.state.openDialog}\r\n          onClose={this.handleClickFriendshipNotif}\r\n        >\r\n          <div ref={this.dialogRef}></div>\r\n          <DialogTitle style={{ textAlign: \"center\" }}>\r\n            Friendship Notifications\r\n          </DialogTitle>\r\n          <DialogContent class=\"notif-container\">\r\n            {this.state.shownNotifDivs} {endDiv}\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FriendshipNotificationsButton;\r\n","E:\\sokial\\sokial\\src\\components\\notificationsContainer.js",["141","142","143","144","145","146","147","148"],"import {\r\n  TextField,\r\n  TextareaAutosize,\r\n  Grid,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\n\r\nconst NotificationsContainer = (props) => {};\r\n\r\nexport default NotificationsContainer;\r\n","E:\\sokial\\sokial\\src\\components\\friendshipNotifEntry.js",["149"],"import { Grid, Button, ButtonGroup, Container } from \"@material-ui/core\";\r\nimport { friendshipRelatedFunctions as frFuncs } from \"../usable functions/endpoint-related\";\r\n\r\nconst FriendshipNotifEntry = (props) => {\r\n  return (\r\n    <Grid direction=\"row\" className=\"friendship-notif-entry\" container>\r\n      <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <div class=\"friendship-notif-img\"></div>\r\n        <div class=\"friendship-notif-name\" style={{ marginLeft: \"4px\" }}>\r\n          {props.fullName}\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <ButtonGroup\r\n          size={\"small\"}\r\n          variant=\"contained\"\r\n          aria-label=\"contained primary button group\"\r\n        >\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={() => {\r\n              frFuncs.handleAcceptFriendship(props.id);\r\n            }}\r\n          >\r\n            Accept\r\n          </Button>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={() => {\r\n              frFuncs.handleRejectFriendship(props.id);\r\n            }}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default FriendshipNotifEntry;\r\n","E:\\sokial\\sokial\\src\\usable functions\\endpoint-related.js",[],["150","151"],"E:\\sokial\\sokial\\src\\components\\postCommentsSection.js",["152"],"import { createRef } from \"react\";\r\nimport { TextField, TextareaAutosize, Button } from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport generalFunctions from \"../usable functions/general\";\r\nimport PostComment from \"./postComment\";\r\nimport { Component } from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nclass PostCommentsSections extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      noMoreComments: false,\r\n      waitingForComments: false,\r\n      firstFetchDone: false,\r\n      fetchedComments: [],\r\n      shownCommentsDivs: [],\r\n    };\r\n\r\n    this.textareaRef = createRef(null);\r\n\r\n    this.numCommentsToFetch = 100; // It's a parameter that can be changed\r\n    this.numCommentsToPush = 15; // It's a parameter that can be changed\r\n\r\n    // This variable is used to prevent making a fetch while\r\n    // haven't get last sent fetch yet. (A problem of scrolling based fetching)\r\n    this.fetching = false;\r\n\r\n    this.handleSendComment = this.handleSendComment.bind(this);\r\n    this.fetchNewComments = this.fetchNewComments.bind(this);\r\n    this.pushToShownComments = this.pushToShownComments.bind(this);\r\n    this.handleWaitingForComments = this.handleWaitingForComments.bind(this);\r\n    //this.toggleReaction = this.toggleReaction.bind(this);\r\n  }\r\n\r\n  handleSendComment() {\r\n    fetch(`/post/comment/${this.props.postId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify({\r\n        content: this.textareaRef.current.value,\r\n        timestamp: generalFunctions.getTimestamp(),\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n  }\r\n\r\n  /*  toggleReaction(postIndex, newReactionType) {\r\n    let tmpCommentsDivs = [...this.state.shownCommentsDivs];\r\n    tmpCommentsDivs[postIndex] = (\r\n      <Post\r\n        id={this.state.fetchedComments[postIndex].id}\r\n        postIndex={postIndex}\r\n        myReactionType={newReactionType}\r\n        content={this.state.fetchedComments[postIndex].content}\r\n        autherFullName={`${this.props.profileData.firstName} ${this.props.profileData.lastName}`}\r\n        toggleReaction={this.toggleReaction}\r\n      />\r\n    );\r\n    this.setState({ shownCommentsDivs: tmpCommentsDivs });\r\n  }\r\n*/\r\n\r\n  handleWaitingForComments() {\r\n    this.setState({ waitingForComments: true });\r\n\r\n    if (\r\n      this.state.fetchedComments.length === this.state.shownCommentsDivs.length\r\n    ) {\r\n      // Need to fetch new comments\r\n      this.fetchNewComments().then((comments) => {\r\n        //console.log(\"Fetched comments >> \", comments);\r\n        if (comments.length === 0) {\r\n          this.setState({ noMoreComments: true });\r\n        } else {\r\n          this.setState({\r\n            fetchedComments: this.state.fetchedComments.concat(comments),\r\n          });\r\n          this.pushToShownComments();\r\n        }\r\n      });\r\n    } else {\r\n      this.pushToShownComments();\r\n    }\r\n\r\n    this.fetching = false;\r\n    this.setState({ waitingForComments: false });\r\n  }\r\n\r\n  fetchNewComments() {\r\n    const escapeComments = this.state.fetchedComments.length;\r\n    const limitComments = this.numCommentsToFetch;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\r\n        `/get-comments/${this.props.postId}?` +\r\n          new URLSearchParams({\r\n            esc: escapeComments,\r\n            limit: limitComments,\r\n          }),\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      )\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((res) => {\r\n          if (!res.valid) {\r\n            // TODO :: Handle invalid fetch\r\n          } else {\r\n            // console.log(res.comments.length);\r\n            return resolve(res.comments);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  pushToShownComments() {\r\n    const tmpCommentsDivs = [];\r\n\r\n    let toPushLeft = this.state.shownCommentsDivs.length;\r\n    let toPushRight = Math.min(\r\n      toPushLeft + this.numCommentsToPush,\r\n      this.state.fetchedComments.length\r\n    );\r\n\r\n    for (let i = toPushLeft; i < toPushRight; i++) {\r\n      tmpCommentsDivs.push(\r\n        <PostComment\r\n          id={this.state.fetchedComments[i].id}\r\n          postIndex={tmpCommentsDivs.length}\r\n          content={this.state.fetchedComments[i].content}\r\n          authorUser={this.state.fetchedComments[i].author_user}\r\n          identity={this.props.identity}\r\n          //toggleReaction={this.toggleReaction}\r\n        />\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      shownCommentsDivs: this.state.shownCommentsDivs.concat(tmpCommentsDivs),\r\n      firstFetchDone: true,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleWaitingForComments();\r\n  }\r\n\r\n  render() {\r\n    let endDiv = null;\r\n    if (this.state.noMoreComments === false && this.state.waitingForComments)\r\n      endDiv = (\r\n        <div id=\"comments-profile-section-loading-div\">\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    else if (this.state.noMoreComments === false) {\r\n      endDiv = (\r\n        <div>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={this.handleWaitingForComments}\r\n          >\r\n            Load more...\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!this.props.openCommentsSection) return null;\r\n    else\r\n      return (\r\n        <div>\r\n          <div className=\"post-comments-section\">\r\n            <div class=\"post-commenting-section\">\r\n              <TextareaAutosize\r\n                rowsMin={2}\r\n                rowsMax={8}\r\n                ref={this.textareaRef}\r\n                style={{\r\n                  width: \"100%\",\r\n                  resize: \"none\",\r\n                  overflow: \"auto\",\r\n                  outlineStyle: \"none\",\r\n                  //borderStyle: \"none\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              />\r\n              <div style={{ width: \"10%\", position: \"relative\" }}>\r\n                <Button\r\n                  id=\"post-comment-send-btn\"\r\n                  style={{ width: \"10px\", backgroundColor: \"transparent\" }}\r\n                  onClick={this.handleSendComment}\r\n                  startIcon={<SendIcon />}\r\n                />\r\n              </div>\r\n            </div>\r\n            {this.state.shownCommentsDivs}\r\n          </div>\r\n          {endDiv}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default PostCommentsSections;\r\n","E:\\sokial\\sokial\\src\\usable functions\\general.js",[],"E:\\sokial\\sokial\\src\\components\\postComment.js",[],{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":4,"column":10,"nodeType":"159","messageId":"160","endLine":4,"endColumn":14},{"ruleId":"157","severity":1,"message":"161","line":9,"column":10,"nodeType":"159","messageId":"160","endLine":9,"endColumn":18},{"ruleId":"157","severity":1,"message":"162","line":12,"column":3,"nodeType":"159","messageId":"160","endLine":12,"endColumn":9},{"ruleId":"157","severity":1,"message":"163","line":13,"column":3,"nodeType":"159","messageId":"160","endLine":13,"endColumn":10},{"ruleId":"157","severity":1,"message":"164","line":14,"column":3,"nodeType":"159","messageId":"160","endLine":14,"endColumn":13},{"ruleId":"157","severity":1,"message":"165","line":15,"column":3,"nodeType":"159","messageId":"160","endLine":15,"endColumn":13},{"ruleId":"157","severity":1,"message":"166","line":16,"column":3,"nodeType":"159","messageId":"160","endLine":16,"endColumn":9},{"ruleId":"167","severity":1,"message":"168","line":84,"column":34,"nodeType":"169","messageId":"170","endLine":84,"endColumn":36},{"ruleId":"167","severity":1,"message":"168","line":85,"column":34,"nodeType":"169","messageId":"170","endLine":85,"endColumn":36},{"ruleId":"167","severity":1,"message":"168","line":90,"column":36,"nodeType":"169","messageId":"170","endLine":90,"endColumn":38},{"ruleId":"153","replacedBy":"171"},{"ruleId":"155","replacedBy":"172"},{"ruleId":"157","severity":1,"message":"161","line":1,"column":10,"nodeType":"159","messageId":"160","endLine":1,"endColumn":18},{"ruleId":"157","severity":1,"message":"173","line":1,"column":20,"nodeType":"159","messageId":"160","endLine":1,"endColumn":26},{"ruleId":"157","severity":1,"message":"173","line":1,"column":20,"nodeType":"159","messageId":"160","endLine":1,"endColumn":26},{"ruleId":"157","severity":1,"message":"174","line":1,"column":10,"nodeType":"159","messageId":"160","endLine":1,"endColumn":19},{"ruleId":"157","severity":1,"message":"175","line":1,"column":21,"nodeType":"159","messageId":"160","endLine":1,"endColumn":37},{"ruleId":"157","severity":1,"message":"166","line":1,"column":45,"nodeType":"159","messageId":"160","endLine":1,"endColumn":51},{"ruleId":"176","severity":1,"message":"177","line":92,"column":6,"nodeType":"178","endLine":92,"endColumn":8,"suggestions":"179"},{"ruleId":"167","severity":1,"message":"168","line":94,"column":40,"nodeType":"169","messageId":"170","endLine":94,"endColumn":42},{"ruleId":"157","severity":1,"message":"174","line":2,"column":3,"nodeType":"159","messageId":"160","endLine":2,"endColumn":12},{"ruleId":"157","severity":1,"message":"180","line":4,"column":3,"nodeType":"159","messageId":"160","endLine":4,"endColumn":7},{"ruleId":"157","severity":1,"message":"181","line":12,"column":10,"nodeType":"159","messageId":"160","endLine":12,"endColumn":19},{"ruleId":"157","severity":1,"message":"174","line":1,"column":10,"nodeType":"159","messageId":"160","endLine":1,"endColumn":19},{"ruleId":"157","severity":1,"message":"175","line":1,"column":21,"nodeType":"159","messageId":"160","endLine":1,"endColumn":37},{"ruleId":"157","severity":1,"message":"174","line":1,"column":10,"nodeType":"159","messageId":"160","endLine":1,"endColumn":19},{"ruleId":"157","severity":1,"message":"175","line":1,"column":21,"nodeType":"159","messageId":"160","endLine":1,"endColumn":37},{"ruleId":"157","severity":1,"message":"180","line":1,"column":39,"nodeType":"159","messageId":"160","endLine":1,"endColumn":43},{"ruleId":"157","severity":1,"message":"164","line":5,"column":3,"nodeType":"159","messageId":"160","endLine":5,"endColumn":13},{"ruleId":"157","severity":1,"message":"182","line":9,"column":10,"nodeType":"159","messageId":"160","endLine":9,"endColumn":15},{"ruleId":"157","severity":1,"message":"183","line":10,"column":8,"nodeType":"159","messageId":"160","endLine":10,"endColumn":25},{"ruleId":"157","severity":1,"message":"184","line":11,"column":8,"nodeType":"159","messageId":"160","endLine":11,"endColumn":21},{"ruleId":"157","severity":1,"message":"162","line":3,"column":3,"nodeType":"159","messageId":"160","endLine":3,"endColumn":9},{"ruleId":"157","severity":1,"message":"163","line":4,"column":3,"nodeType":"159","messageId":"160","endLine":4,"endColumn":10},{"ruleId":"157","severity":1,"message":"165","line":6,"column":3,"nodeType":"159","messageId":"160","endLine":6,"endColumn":13},{"ruleId":"157","severity":1,"message":"166","line":7,"column":3,"nodeType":"159","messageId":"160","endLine":7,"endColumn":9},{"ruleId":"157","severity":1,"message":"183","line":12,"column":8,"nodeType":"159","messageId":"160","endLine":12,"endColumn":25},{"ruleId":"157","severity":1,"message":"185","line":15,"column":7,"nodeType":"159","messageId":"160","endLine":15,"endColumn":36},{"ruleId":"157","severity":1,"message":"186","line":16,"column":16,"nodeType":"159","messageId":"160","endLine":16,"endColumn":23},{"ruleId":"187","severity":2,"message":"188","line":31,"column":16,"nodeType":"159","messageId":"189","endLine":31,"endColumn":45},{"ruleId":"157","severity":1,"message":"174","line":3,"column":3,"nodeType":"159","messageId":"160","endLine":3,"endColumn":12},{"ruleId":"157","severity":1,"message":"175","line":4,"column":3,"nodeType":"159","messageId":"160","endLine":4,"endColumn":19},{"ruleId":"157","severity":1,"message":"180","line":5,"column":3,"nodeType":"159","messageId":"160","endLine":5,"endColumn":7},{"ruleId":"157","severity":1,"message":"190","line":10,"column":3,"nodeType":"159","messageId":"160","endLine":10,"endColumn":16},{"ruleId":"157","severity":1,"message":"191","line":15,"column":8,"nodeType":"159","messageId":"160","endLine":15,"endColumn":30},{"ruleId":"157","severity":1,"message":"183","line":16,"column":8,"nodeType":"159","messageId":"160","endLine":16,"endColumn":25},{"ruleId":"157","severity":1,"message":"174","line":2,"column":3,"nodeType":"159","messageId":"160","endLine":2,"endColumn":12},{"ruleId":"157","severity":1,"message":"175","line":3,"column":3,"nodeType":"159","messageId":"160","endLine":3,"endColumn":19},{"ruleId":"157","severity":1,"message":"180","line":4,"column":3,"nodeType":"159","messageId":"160","endLine":4,"endColumn":7},{"ruleId":"157","severity":1,"message":"166","line":5,"column":3,"nodeType":"159","messageId":"160","endLine":5,"endColumn":9},{"ruleId":"157","severity":1,"message":"192","line":6,"column":3,"nodeType":"159","messageId":"160","endLine":6,"endColumn":9},{"ruleId":"157","severity":1,"message":"193","line":7,"column":3,"nodeType":"159","messageId":"160","endLine":7,"endColumn":14},{"ruleId":"157","severity":1,"message":"194","line":8,"column":3,"nodeType":"159","messageId":"160","endLine":8,"endColumn":16},{"ruleId":"157","severity":1,"message":"190","line":9,"column":3,"nodeType":"159","messageId":"160","endLine":9,"endColumn":16},{"ruleId":"157","severity":1,"message":"195","line":1,"column":37,"nodeType":"159","messageId":"160","endLine":1,"endColumn":46},{"ruleId":"153","replacedBy":"196"},{"ruleId":"155","replacedBy":"197"},{"ruleId":"157","severity":1,"message":"174","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":19},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["198"],["199"],"'useRef' is defined but never used.","'TextField' is defined but never used.","'TextareaAutosize' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isMyProfile' and 'params'. Either include them or remove the dependency array.","ArrayExpression",["200"],"'Grid' is defined but never used.","'useFormik' is defined but never used.","'Badge' is defined but never used.","'NotificationsIcon' is defined but never used.","'PersonAddIcon' is defined but never used.","'FriendshipNotificationsButton' is assigned a value but never used.","'setOpen' is assigned a value but never used.","no-undef","'friendshipNotificationsButton' is not defined.","undef","'DialogActions' is defined but never used.","'NotificationsContainer' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'Container' is defined but never used.",["198"],["199"],"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},"Update the dependencies array to be: [isMyProfile, params]",{"range":"203","text":"204"},[2879,2881],"[isMyProfile, params]"]