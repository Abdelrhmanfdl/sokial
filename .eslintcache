[{"E:\\sokial\\sokial\\src\\index.js":"1","E:\\sokial\\sokial\\src\\App.js":"2","E:\\sokial\\sokial\\src\\reportWebVitals.js":"3","E:\\sokial\\sokial\\src\\components\\signup.js":"4","E:\\sokial\\sokial\\src\\components\\login.js":"5","E:\\sokial\\sokial\\src\\components\\profile.js":"6","E:\\sokial\\sokial\\src\\components\\posting.js":"7","E:\\sokial\\sokial\\src\\components\\post.js":"8","E:\\sokial\\sokial\\src\\components\\postsProfileSection.js":"9","E:\\sokial\\sokial\\src\\components\\profileHeader.js":"10","E:\\sokial\\sokial\\src\\components\\mainBar.js":"11","E:\\sokial\\sokial\\src\\components\\FriendshipNotificationsButton.js":"12","E:\\sokial\\sokial\\src\\components\\friendshipNotificationsButton.js":"13","E:\\sokial\\sokial\\src\\components\\notificationsContainer.js":"14","E:\\sokial\\sokial\\src\\components\\friendshipNotifEntry.js":"15","E:\\sokial\\sokial\\src\\usable functions\\endpoint-related.js":"16","E:\\sokial\\sokial\\src\\components\\postCommentsSection.js":"17","E:\\sokial\\sokial\\src\\usable functions\\general.js":"18","E:\\sokial\\sokial\\src\\components\\postComment.js":"19","E:\\sokial\\sokial\\src\\components\\postEditing.js":"20","E:\\sokial\\sokial\\src\\components\\home.js":"21","E:\\sokial\\sokial\\src\\components\\postsHomeSection.js":"22","E:\\sokial\\sokial\\src\\components\\profileImg.js":"23"},{"size":231,"mtime":1611459015441,"results":"24","hashOfConfig":"25"},{"size":2473,"mtime":1612268014976,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":11531,"mtime":1611632160414,"results":"28","hashOfConfig":"25"},{"size":3163,"mtime":1611570261559,"results":"29","hashOfConfig":"25"},{"size":3421,"mtime":1613075116659,"results":"30","hashOfConfig":"25"},{"size":2827,"mtime":1612255784722,"results":"31","hashOfConfig":"25"},{"size":4229,"mtime":1612343512539,"results":"32","hashOfConfig":"25"},{"size":8176,"mtime":1612344646240,"results":"33","hashOfConfig":"25"},{"size":2769,"mtime":1613085205290,"results":"34","hashOfConfig":"25"},{"size":1986,"mtime":1612289921352,"results":"35","hashOfConfig":"25"},{"size":884,"mtime":1611910578522,"results":"36","hashOfConfig":"25"},{"size":5002,"mtime":1612290028624,"results":"37","hashOfConfig":"25"},{"size":248,"mtime":1611924095031,"results":"38","hashOfConfig":"25"},{"size":1279,"mtime":1612014911088,"results":"39","hashOfConfig":"25"},{"size":1375,"mtime":1611999343698,"results":"40","hashOfConfig":"25"},{"size":8357,"mtime":1612334897047,"results":"41","hashOfConfig":"25"},{"size":261,"mtime":1612055288154,"results":"42","hashOfConfig":"25"},{"size":3519,"mtime":1612334821120,"results":"43","hashOfConfig":"25"},{"size":2051,"mtime":1612256386286,"results":"44","hashOfConfig":"25"},{"size":271,"mtime":1612341926011,"results":"45","hashOfConfig":"25"},{"size":8382,"mtime":1612342317698,"results":"46","hashOfConfig":"25"},{"size":4169,"mtime":1613085210779,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"f5302e",{"filePath":"51","messages":"52","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":1,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\sokial\\sokial\\src\\index.js",[],["108","109"],"E:\\sokial\\sokial\\src\\App.js",["110","111","112","113","114","115","116","117","118","119","120","121"],"import \"./App.scss\";\r\nimport Signup from \"./components/signup\";\r\nimport Login from \"./components/login\";\r\nimport { Link, Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\r\nimport Profile from \"./components/profile\";\r\nimport Posting from \"./components/posting\";\r\nimport Post from \"./components/post\";\r\nimport Home from \"./components/home\";\r\nimport MainBar from \"./components/mainBar\";\r\nimport { useState, Component } from \"react\";\r\n\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.gotUserData = this.gotUserData.bind(this);\r\n    this.handleLogout = this.handleLogout.bind(this);\r\n\r\n    this.state = {\r\n      identity: null,\r\n      authChecked: false,\r\n    };\r\n  }\r\n\r\n  gotUserData(data) {\r\n    this.setState({ identity: data });\r\n    window.location.replace(\"/home\");\r\n  }\r\n  async handleLogout() {\r\n    await fetch(\"/logout\", {\r\n      method: \"post\",\r\n    });\r\n\r\n    window.location.replace(\"/login\");\r\n    this.setState({ identity: null });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let res = await fetch(\"/about-auth\", { method: \"GET\" });\r\n    res = await res.json();\r\n\r\n    if (res.auth) {\r\n      if (\r\n        window.location.pathname == \"/login\" ||\r\n        window.location.pathname == \"/signup\"\r\n      )\r\n        window.location.replace(\"/home\");\r\n      this.setState({ identity: res.userData });\r\n    } else {\r\n      if (window.location.pathname == \"/home\")\r\n        window.location.replace(\"/login\");\r\n    }\r\n\r\n    this.setState({ authChecked: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.authChecked)\r\n      return (\r\n        <Router>\r\n          <MainBar logout={this.handleLogout} identity={this.state.identity} />\r\n\r\n          <Switch>\r\n            <Route\r\n              path=\"/login\"\r\n              component={() => <Login gotUserData={this.gotUserData} />}\r\n            />\r\n            <Route\r\n              path=\"/signup\"\r\n              component={() => <Signup gotUserData={this.gotUserData} />}\r\n            />\r\n            <Route\r\n              path=\"/profile\"\r\n              component={() => <Profile identity={this.state.identity} />}\r\n            />\r\n            <Route\r\n              path=\"/home\"\r\n              component={() => <Home identity={this.state.identity} />}\r\n            />\r\n          </Switch>\r\n        </Router>\r\n      );\r\n    else return null;\r\n  }\r\n}\r\nexport default App;\r\n","E:\\sokial\\sokial\\src\\reportWebVitals.js",[],["122","123"],"E:\\sokial\\sokial\\src\\components\\signup.js",["124","125"],"import { useState, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\n\r\n/*\r\nTODO :: Show and handle invalidation of account creation\r\n*/\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\nimport { countries } from \"../data-stores/login and signup.json\";\r\n\r\nconst maxNameLen = 20,\r\n  minNameLen = 2,\r\n  maxPassLen = 20,\r\n  minPassLen = 6,\r\n  maxCityLen = 20,\r\n  minCityLen = 2;\r\n\r\nconst validationSchema = yup.object({\r\n  fname: yup\r\n    .string()\r\n    .min(\r\n      minNameLen,\r\n      `First name should be of minimum ${minNameLen} characters length`\r\n    )\r\n    .max(\r\n      maxNameLen,\r\n      `First name should be of maximum ${maxNameLen} characters length`\r\n    )\r\n    .required(\"First name is required\"),\r\n\r\n  lname: yup\r\n    .string()\r\n    .min(\r\n      minNameLen,\r\n      `Last name should be of minimum ${minNameLen} characters length`\r\n    )\r\n    .max(\r\n      maxNameLen,\r\n      `Last name should be of maximum ${maxNameLen} characters length`\r\n    )\r\n    .required(\"Last name is required\"),\r\n\r\n  email: yup\r\n    .string()\r\n    .email(\"This email is invalid\")\r\n    .required(\"Email is required\"),\r\n\r\n  password: yup\r\n    .string()\r\n    .min(\r\n      minPassLen,\r\n      `Password should be of minimum ${minPassLen} characters length`\r\n    )\r\n    .max(\r\n      maxPassLen,\r\n      `Password should be of maximum ${maxPassLen} characters length`\r\n    )\r\n    .required(\"Password is required\"),\r\n\r\n  gender: yup.string().required(\"Gender is required\"),\r\n\r\n  birthday: yup.string().required(\"Birth day is required\"),\r\n  birthmonth: yup.string().required(\"Birth month is required\"),\r\n  birthyear: yup.string().required(\"Birth year is required\"),\r\n\r\n  country: yup.string().required(\"Country is required\"),\r\n  city: yup\r\n    .string()\r\n    .min(\r\n      minCityLen,\r\n      `City should be of minimum ${minPassLen} characters length`\r\n    )\r\n    .max(\r\n      maxCityLen,\r\n      `City should be of maximum ${maxPassLen} characters length`\r\n    )\r\n    .required(\"City is required\"),\r\n});\r\n\r\nconst Birthdate = (props) => {\r\n  const minPossibleYear = 1900;\r\n  const date = new Date();\r\n\r\n  const years = [],\r\n    days = Array.from(Array(31).keys()).map((x) => {\r\n      return { label: String(x + 1), value: x + 1 };\r\n    }),\r\n    monthes = Array.from(Array(12).keys()).map((x) => {\r\n      return { label: String(x + 1), value: x + 1 };\r\n    });\r\n  for (let i = date.getFullYear(); i >= minPossibleYear; i--)\r\n    years.push({\r\n      label: String(i),\r\n      value: i,\r\n    });\r\n\r\n  return (\r\n    <FormControl>\r\n      <Autocomplete\r\n        id=\"birthday\"\r\n        name=\"birthday\"\r\n        style={{ width: 300 }}\r\n        options={days}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => {\r\n          return (\r\n            <TextField\r\n              error={\r\n                props.formik.touched.birthday &&\r\n                Boolean(props.formik.errors.birthday)\r\n              }\r\n              helperText={\r\n                props.formik.touched.birthday && props.formik.errors.birthday\r\n              }\r\n              {...params}\r\n              label=\"Day of birth\"\r\n              variant=\"outlined\"\r\n            />\r\n          );\r\n        }}\r\n        onChange={async (e, newday) => {\r\n          if (newday) props.formik.values.birthday = newday.value;\r\n          else props.formik.values.birthday = \"\";\r\n          await props.formik.handleChange(\"birthday\");\r\n        }}\r\n        error={\r\n          props.formik.touched.birthday && Boolean(props.formik.errors.birthday)\r\n        }\r\n        helperText={\r\n          props.formik.touched.birthday && props.formik.errors.birthday\r\n        }\r\n      />\r\n      <Autocomplete\r\n        id=\"birthmonth\"\r\n        name=\"birthmonth\"\r\n        style={{ width: 300 }}\r\n        options={monthes}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => {\r\n          return (\r\n            <TextField\r\n              error={\r\n                props.formik.touched.birthmonth &&\r\n                Boolean(props.formik.errors.birthmonth)\r\n              }\r\n              helperText={\r\n                props.formik.touched.birthmonth &&\r\n                props.formik.errors.birthmonth\r\n              }\r\n              {...params}\r\n              label=\"Month of birth\"\r\n              variant=\"outlined\"\r\n            />\r\n          );\r\n        }}\r\n        onChange={async (e, newmonth) => {\r\n          if (newmonth) props.formik.values.birthmonth = newmonth.value;\r\n          else props.formik.values.birthmonth = \"\";\r\n          await props.formik.handleChange(\"birthmonth\");\r\n        }}\r\n        error={\r\n          props.formik.touched.birthmonth &&\r\n          Boolean(props.formik.errors.birthmonth)\r\n        }\r\n        helperText={\r\n          props.formik.touched.birthmonth && props.formik.errors.birthmonth\r\n        }\r\n      />\r\n\r\n      <Autocomplete\r\n        id=\"birthyear\"\r\n        name=\"birthyear\"\r\n        style={{ width: 300 }}\r\n        options={years}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.label}\r\n        renderInput={(params) => {\r\n          return (\r\n            <TextField\r\n              error={\r\n                props.formik.touched.birthyear &&\r\n                Boolean(props.formik.errors.birthyear)\r\n              }\r\n              helperText={\r\n                props.formik.touched.birthyear && props.formik.errors.birthyear\r\n              }\r\n              {...params}\r\n              label=\"Year of birth\"\r\n              variant=\"outlined\"\r\n            />\r\n          );\r\n        }}\r\n        onChange={async (e, newyear) => {\r\n          if (newyear) props.formik.values.birthyear = newyear.value;\r\n          else props.formik.values.birthyear = \"\";\r\n          await props.formik.handleChange(\"birthyear\");\r\n        }}\r\n        error={\r\n          props.formik.touched.birthyear &&\r\n          Boolean(props.formik.errors.birthyear)\r\n        }\r\n        helperText={\r\n          props.formik.touched.birthyear && props.formik.errors.birthyear\r\n        }\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst Signup = (props) => {\r\n  // Redirection to 'home' is a token recognised\r\n  if (document.cookie.indexOf(\"; token\") > -1) {\r\n    window.location.replace(\"/home\");\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      fname: \"\",\r\n      lname: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      birthday: \"\",\r\n      birthmonth: \"\",\r\n      birthyear: \"\",\r\n      gender: \"\",\r\n      country: \"\",\r\n      city: \"\",\r\n    },\r\n\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      const user = {\r\n        fName: values.fname,\r\n        lName: values.lname,\r\n        email: values.email,\r\n        password: values.password,\r\n        country: values.country,\r\n        city: values.city,\r\n        gender: values.gender,\r\n        dob: values.birthyear + \"-\" + values.birthmonth + \"-\" + values.birthday,\r\n      };\r\n\r\n      try {\r\n        const res = await fetch(\"/signup\", {\r\n          method: \"post\",\r\n          body: JSON.stringify(user),\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n        const resJson = await res.json();\r\n        if (!resJson.valid) {\r\n          console.log(resJson.message);\r\n        } else {\r\n          // valid request\r\n          props.gotUserData(resJson.userData);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n\r\n      console.log(values);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <FormControl>\r\n        <TextField\r\n          id=\"in-txt-fname\"\r\n          name=\"fname\"\r\n          label=\"First Name\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.fname && Boolean(formik.errors.fname)}\r\n          helperText={formik.touched.fname && formik.errors.fname}\r\n        />\r\n        <TextField\r\n          id=\"in-txt-lname\"\r\n          name=\"lname\"\r\n          label=\"Last Name\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.lname && Boolean(formik.errors.lname)}\r\n          helperText={formik.touched.lname && formik.errors.lname}\r\n        />\r\n        <TextField\r\n          id=\"in-txt-email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n        />\r\n        <TextField\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.password && Boolean(formik.errors.password)}\r\n          helperText={formik.touched.password && formik.errors.password}\r\n        />\r\n\r\n        <FormControl\r\n          component=\"fieldset\"\r\n          error={formik.touched.gender && Boolean(formik.errors.gender)}\r\n          helperText={formik.touched.gender && formik.errors.gender}\r\n        >\r\n          <RadioGroup name=\"gender\" row onChange={formik.handleChange}>\r\n            <FormControlLabel\r\n              value=\"m\"\r\n              control={<Radio />}\r\n              label=\"Male\"\r\n              labelPlacement=\"top\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"f\"\r\n              control={<Radio />}\r\n              label=\"Female\"\r\n              labelPlacement=\"top\"\r\n            />\r\n            <FormHelperText\r\n              disabled={formik.touched.gender && Boolean(formik.errors.gender)}\r\n            >\r\n              {formik.errors.gender}\r\n            </FormHelperText>\r\n          </RadioGroup>\r\n        </FormControl>\r\n\r\n        <Birthdate formik={formik} />\r\n\r\n        <Autocomplete\r\n          id=\"country\"\r\n          style={{ width: 300 }}\r\n          name=\"country\"\r\n          options={countries}\r\n          autoHighlight\r\n          getOptionLabel={(option) => option.label}\r\n          renderInput={(params) => {\r\n            return (\r\n              <TextField\r\n                {...params}\r\n                label=\"Choose a country\"\r\n                variant=\"outlined\"\r\n                error={formik.touched.country && Boolean(formik.errors.country)}\r\n                helperText={formik.touched.country && formik.errors.country}\r\n              />\r\n            );\r\n          }}\r\n          onChange={(e, newcountry) => {\r\n            if (newcountry) formik.values.country = newcountry.code;\r\n            else formik.values.country = \"\";\r\n            formik.handleChange(\"country\");\r\n          }}\r\n        />\r\n        <TextField\r\n          id=\"city\"\r\n          name=\"city\"\r\n          label=\"City\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.city && Boolean(formik.errors.city)}\r\n          helperText={formik.touched.city && formik.errors.city}\r\n        />\r\n\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          SignUp\r\n        </Button>\r\n        <small>\r\n          <span style={{ color: \"gray\" }}>already have an account? </span>\r\n          <a href=\"\\login\">login</a>\r\n        </small>\r\n      </FormControl>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","E:\\sokial\\sokial\\src\\components\\login.js",["126"],"import { useState, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\n\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\nconst maxPassLen = 20,\r\n  minPassLen = 6;\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email(\"This email is invalid\")\r\n    .required(\"Email is required\"),\r\n\r\n  password: yup\r\n    .string()\r\n    .min(\r\n      minPassLen,\r\n      `Password should be of minimum ${minPassLen} characters length`\r\n    )\r\n    .max(\r\n      maxPassLen,\r\n      `Password should be of maximum ${maxPassLen} characters length`\r\n    )\r\n    .required(\"Password is required\"),\r\n});\r\n\r\nconst Login = (props) => {\r\n  // Redirection to 'home' is a token recognised\r\n  /*if (document.cookie.indexOf(\"; token\") > -1) {\r\n    window.location.replace(\"/home\");\r\n    // TODO :: Get a way to enforce not show Login component\r\n  }*/\r\n\r\n  const [loginError, setLoginError] = useState(null);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      const user = {\r\n        email: values.email,\r\n        password: values.password,\r\n      };\r\n\r\n      try {\r\n        const res = await fetch(\"/login\", {\r\n          method: \"post\",\r\n          body: JSON.stringify(user),\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n        const resJson = await res.json();\r\n        if (!resJson.valid) {\r\n          setLoginError({ message: resJson.message });\r\n          console.log(resJson.message);\r\n        } else {\r\n          // valid request\r\n          props.gotUserData(resJson.userData);\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form id=\"login-form\" onSubmit={formik.handleSubmit}>\r\n      <FormControl error={loginError}>\r\n        <FormHelperText disabled={loginError}>\r\n          {loginError && loginError.message}\r\n        </FormHelperText>\r\n        <TextField\r\n          id=\"in-txt-email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n        />\r\n        <TextField\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.password && Boolean(formik.errors.password)}\r\n          helperText={formik.touched.password && formik.errors.password}\r\n        />\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Login\r\n        </Button>\r\n        <small>\r\n          <span style={{ color: \"gray\" }}>want to create an account? </span>\r\n          <a href=\"\\signup\">signup</a>\r\n        </small>\r\n      </FormControl>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","E:\\sokial\\sokial\\src\\components\\profile.js",["127","128","129","130","131","132"],"E:\\sokial\\sokial\\src\\components\\posting.js",["133"],"import {\r\n  TextareaAutosize,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\nimport generalFunctions from \"../usable functions/general\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nconst Posting = (props) => {\r\n  /*\r\n  TODO :: Save the textarea if no posting or refreshing happened\r\n  */\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [disablePosting, setDisablePosting] = useState(true);\r\n  const [disableWriting, setDisableWriting] = useState(false);\r\n  const textareaRef = useRef(null);\r\n\r\n  const handleOpenPostingDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n  const handleClosePostingDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleClickPost = () => {\r\n    setDisablePosting(true);\r\n    setDisableWriting(true);\r\n    fetch(\"/post\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n      body: JSON.stringify({\r\n        content: textareaRef.current.value,\r\n        privacy: 5 /* TODO :: Update  */,\r\n        timestamp: generalFunctions.getTimestamp(),\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(\"Can't post.\");\r\n        setOpenDialog(false);\r\n        setDisableWriting(false);\r\n      })\r\n      .catch((res) => {\r\n        /*\r\n        TODO :: Handle posting failure\r\n      */\r\n      });\r\n  };\r\n\r\n  if (!props.isMyProfile) return null;\r\n  return (\r\n    <div id=\"profile-posting-section\" className=\"profile-posts-section\">\r\n      <div id=\"profile-posting-header\">\r\n        <div\r\n          id=\"profile-wanna-posting-textarea\"\r\n          onClick={handleOpenPostingDialog}\r\n        ></div>\r\n      </div>\r\n      <Dialog open={openDialog} onClose={handleClosePostingDialog}>\r\n        <DialogTitle style={{ textAlign: \"center\" }}>Create post</DialogTitle>\r\n        <DialogContent\r\n          style={{ width: \"400px\", height: \"200px\", padding: \"8px 0px\" }}\r\n        >\r\n          <TextareaAutosize\r\n            ref={textareaRef}\r\n            rowsMin={3}\r\n            rowsMax={8}\r\n            autoFocus\r\n            disabled={disableWriting}\r\n            placeholder=\"What's on your mind?\"\r\n            onInput={() => {\r\n              if (textareaRef.current.value.trim() == \"\") {\r\n                setDisablePosting(true);\r\n              } else if (disablePosting) setDisablePosting(false);\r\n            }}\r\n            style={{\r\n              width: \"100%\",\r\n              outlineStyle: \"none\",\r\n              borderStyle: \"none\",\r\n              resize: \"none\",\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClickPost} disabled={disablePosting}>\r\n            Post\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posting;\r\n","E:\\sokial\\sokial\\src\\components\\post.js",["134","135","136"],"import { TextField, TextareaAutosize, Grid, Button } from \"@material-ui/core\";\r\nimport PostCommentsSections from \"./postCommentsSection\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { useState, useRef } from \"react\";\r\nimport PostEditing from \"./postEditing\";\r\n\r\n/*\r\nProps: \r\n- id: post id\r\n- postIndex\r\n- postOwnerData\r\n- myReactionType\r\n- content\r\n- identity\r\n- toggleReaction\r\n- handleDeletePost\r\n- handleEditPost\r\n*/\r\n\r\nconst Post = (props) => {\r\n  const [openCommentsSection, setOpenCommentsSection] = useState(false);\r\n  const [openMore, setOpenMore] = useState(false);\r\n  const [editingPost, setEditingPost] = useState(false);\r\n\r\n  const postContentRef = useRef(null);\r\n\r\n  const handleClickDeletePost = () => {\r\n    props.handleDeletePost(props.postIndex);\r\n    setOpenMore(false);\r\n  };\r\n  const handleClickEditPost = () => {\r\n    setEditingPost(true);\r\n    setOpenMore(false);\r\n  };\r\n\r\n  const handleToggleLike = () => {\r\n    fetch(\r\n      `/post/react/${props.id}?` + new URLSearchParams({ reaction_type: \"1\" }),\r\n      { method: \"POST\" }\r\n    ).then((res) => {\r\n      if (!res.ok) throw new Error();\r\n    });\r\n\r\n    props.toggleReaction(props.postIndex, props.myReactionType ? null : \"1\");\r\n  };\r\n\r\n  return (\r\n    <Grid id=\"tmp-post-container\">\r\n      <div className=\"post\">\r\n        <div className=\"post-header\">\r\n          <div className=\"post-identity-container\">\r\n            <div className=\"post-profile-photo\" />\r\n            <small\r\n              style={{ fontWeight: \"bold\" }}\r\n            >{`${props.postOwnerData.firstName} ${props.postOwnerData.lastName}`}</small>\r\n\r\n            {props.identity.id == props.postOwnerData.id ? (\r\n              <div className=\"post-more-div\">\r\n                <Button\r\n                  id=\"post-more-btn\"\r\n                  disableRipple\r\n                  //disabled={editing}\r\n                  style={{ backgroundColor: \"transparent\" }}\r\n                  startIcon={<MoreVertIcon />}\r\n                  onClick={() => {\r\n                    setOpenMore(!openMore);\r\n                  }}\r\n                />\r\n                {openMore ? (\r\n                  <div className=\"post-more-options\">\r\n                    <div\r\n                      className=\"post-more-edit\"\r\n                      onClick={handleClickEditPost}\r\n                    >\r\n                      Edit\r\n                    </div>\r\n                    <div\r\n                      className=\"post-more-delete\"\r\n                      onClick={handleClickDeletePost}\r\n                    >\r\n                      Delete\r\n                    </div>\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n\r\n        <div ref={postContentRef} className=\"post-content\">\r\n          {props.content}\r\n        </div>\r\n        <div className=\"post-footer\">\r\n          <div className=\"post-counters\">\r\n            <div className=\"post-like-counter\">\r\n              {props.postCounters.reactionsCounter} Likes\r\n            </div>\r\n            <div className=\"post-comment-counter\">\r\n              {props.postCounters.commentsCounter} Comments\r\n            </div>\r\n          </div>\r\n          <div className=\"post-btns\">\r\n            <Button\r\n              onClick={handleToggleLike}\r\n              color={props.myReactionType ? \"secondary\" : \"default\"}\r\n              variant={props.myReactionType ? \"contained\" : \"default\"}\r\n            >\r\n              Like\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setOpenCommentsSection(!openCommentsSection);\r\n              }}\r\n            >\r\n              Comment\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <PostCommentsSections\r\n          identity={props.identity}\r\n          postOwnerData={props.postOwnerData}\r\n          postId={props.id}\r\n          openCommentsSection={openCommentsSection}\r\n        />\r\n      </div>\r\n      <PostEditing\r\n        postIndex={props.postIndex}\r\n        editingPost={editingPost}\r\n        setEditingPost={setEditingPost}\r\n        postContentRef={postContentRef}\r\n        handleEditPost={props.handleEditPost}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","E:\\sokial\\sokial\\src\\components\\postsProfileSection.js",[],"E:\\sokial\\sokial\\src\\components\\profileHeader.js",["137","138","139","140","141","142"],"E:\\sokial\\sokial\\src\\components\\mainBar.js",["143"],"import { NavLink } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Badge } from \"@material-ui/core\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport FriendshipNotificationsButton from \"./friendshipNotificationsButton\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\n\r\nconst MainBar = (props) => {\r\n  if (props.identity == null) {\r\n    return (\r\n      <AppBar position=\"fixed\" id=\"main-bar\">\r\n        <Toolbar id=\"mainbar-notlogged-toolbar\">\r\n          <Typography variant=\"h6\">Sokial</Typography>\r\n          <div id=\"mainbar-notlogged-buttons\">\r\n            <Button color=\"inherit\">\r\n              <NavLink to=\"/login\" className=\"navlink-button\">\r\n                Login\r\n              </NavLink>\r\n            </Button>\r\n            <Button color=\"inherit\" href=\"/signup\" aria-current=\"page\">\r\n              <NavLink to=\"/Signup\" className=\"navlink-button\">\r\n                Signup\r\n              </NavLink>\r\n            </Button>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  } else {\r\n    return (\r\n      <AppBar position=\"fixed\" id=\"main-bar\">\r\n        <Toolbar id=\"mainbar-logged-toolbar\">\r\n          <Typography variant=\"h6\">Sokial</Typography>\r\n\r\n          <NavLink to=\"/home\" className=\"navlink-button\">\r\n            <IconButton color=\"inherit\">\r\n              <HomeIcon />\r\n            </IconButton>\r\n          </NavLink>\r\n\r\n          <NavLink\r\n            to={`/profile?id=${props.identity.id}`}\r\n            className=\"navlink-button\"\r\n          >\r\n            <IconButton color=\"inherit\">\r\n              <AccountCircleIcon />\r\n            </IconButton>\r\n          </NavLink>\r\n\r\n          <FriendshipNotificationsButton identity={props.identity} />\r\n          <Button id=\"\" color=\"inherit\" onClick={props.logout}>\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MainBar;\r\n","E:\\sokial\\sokial\\src\\components\\FriendshipNotificationsButton.js",["144","145","146","147","148","149","150","151"],"E:\\sokial\\sokial\\src\\components\\friendshipNotificationsButton.js",["152","153","154","155","156","157"],"import { Component, createRef } from \"react\";\r\nimport {\r\n  TextField,\r\n  TextareaAutosize,\r\n  Grid,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  Badge,\r\n} from \"@material-ui/core\";\r\nimport FriendshipNotifEntry from \"./friendshipNotifEntry\";\r\nimport NotificationsContainer from \"./notificationsContainer\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nclass FriendshipNotificationsButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      openDialog: false,\r\n\r\n      noMoreNotif: false,\r\n      fetchedNotif: [],\r\n      shownNotifDivs: [],\r\n    };\r\n\r\n    this.dialogRef = createRef(null);\r\n\r\n    this.numNotifToFetch = 15; // It's a parameter that can be changed\r\n    this.numNotifToPush = 5; // It's a parameter that can be changed\r\n\r\n    this.handleClickFriendshipNotif = this.handleClickFriendshipNotif.bind(\r\n      this\r\n    );\r\n    this.pushToShownNotif = this.pushToShownNotif.bind(this);\r\n    this.handleWaitingForNotif = this.handleWaitingForNotif.bind(this);\r\n    this.fetchNewNotif = this.fetchNewNotif.bind(this);\r\n  }\r\n\r\n  // Fetching Friendship Notifications\r\n  fetchNewNotif() {\r\n    const escapeNotif = this.state.fetchedNotif.length;\r\n    const limitNotif = this.numNotifToFetch;\r\n\r\n    console.log(`${escapeNotif} ${limitNotif}`);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\r\n        `/friendship-request/requests?` +\r\n          new URLSearchParams({\r\n            asreceiver: true,\r\n            esc: escapeNotif,\r\n            limit: limitNotif,\r\n          }),\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      )\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((res) => {\r\n          if (!res.valid) {\r\n            // TODO :: Handle invalid fetch\r\n          } else {\r\n            console.log(res.data);\r\n            return resolve(res.data);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  handleClickFriendshipNotif() {\r\n    this.setState({\r\n      openDialog: !this.state.openDialog,\r\n    });\r\n  }\r\n\r\n  pushToShownNotif() {\r\n    const tmpNotifDivs = [];\r\n\r\n    let toPushLeft = this.state.shownNotifDivs.length;\r\n    let toPushRight = Math.min(\r\n      toPushLeft + this.numNotifToPush,\r\n      this.state.fetchedNotif.length\r\n    );\r\n\r\n    for (let i = toPushLeft; i < toPushRight; i++)\r\n      tmpNotifDivs.push(\r\n        <FriendshipNotifEntry\r\n          id={this.state.fetchedNotif[i].id}\r\n          fullName={`${this.state.fetchedNotif[i].firstName} ${this.state.fetchedNotif[i].lastName}`}\r\n        />\r\n      );\r\n\r\n    this.setState({\r\n      shownNotifDivs: this.state.shownNotifDivs.concat(tmpNotifDivs),\r\n    });\r\n  }\r\n\r\n  handleWaitingForNotif() {\r\n    this.setState({ waitingForNotif: true });\r\n\r\n    if (this.state.fetchedNotif.length === this.state.shownNotifDivs.length) {\r\n      // Need to fetch new notif\r\n      this.fetchNewNotif().then((notif) => {\r\n        //console.log(\"Fetched notif >> \", notif);\r\n        if (notif.length === 0) {\r\n          this.setState({ noMoreNotif: true });\r\n        } else {\r\n          this.setState({\r\n            fetchedNotif: this.state.fetchedNotif.concat(notif),\r\n          });\r\n          this.pushToShownNotif();\r\n        }\r\n      });\r\n    } else {\r\n      this.pushToShownNotif();\r\n    }\r\n\r\n    this.fetching = false;\r\n    this.setState({ waitingForNotif: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleWaitingForNotif();\r\n  }\r\n\r\n  render() {\r\n    let endDiv = null;\r\n    if (this.state.noMoreNotif === false && this.state.waitingForNotif)\r\n      endDiv = (\r\n        <div id=\"notif-profile-section-loading-div\">\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    else if (this.state.noMoreNotif === false) {\r\n      endDiv = (\r\n        <div>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={this.handleWaitingForNotif}\r\n          >\r\n            Load more...\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"notifbtn-with-container\">\r\n        <IconButton color=\"inherit\" onClick={this.handleClickFriendshipNotif}>\r\n          <Badge\r\n            badgeContent={this.state.fetchedNotif.length}\r\n            color=\"secondary\"\r\n            variant=\"dot\"\r\n          >\r\n            <PersonAddIcon />\r\n          </Badge>\r\n        </IconButton>\r\n\r\n        <Dialog\r\n          open={this.state.openDialog}\r\n          onClose={this.handleClickFriendshipNotif}\r\n        >\r\n          <div ref={this.dialogRef}></div>\r\n          <DialogTitle style={{ textAlign: \"center\" }}>\r\n            Friendship Notifications\r\n          </DialogTitle>\r\n          <DialogContent class=\"notif-container\">\r\n            {this.state.shownNotifDivs} {endDiv}\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FriendshipNotificationsButton;\r\n","E:\\sokial\\sokial\\src\\components\\notificationsContainer.js",["158","159","160","161","162","163","164","165"],"import {\r\n  TextField,\r\n  TextareaAutosize,\r\n  Grid,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\n\r\nconst NotificationsContainer = (props) => {};\r\n\r\nexport default NotificationsContainer;\r\n","E:\\sokial\\sokial\\src\\components\\friendshipNotifEntry.js",["166"],"import { Grid, Button, ButtonGroup, Container } from \"@material-ui/core\";\r\nimport { friendshipRelatedFunctions as frFuncs } from \"../usable functions/endpoint-related\";\r\n\r\nconst FriendshipNotifEntry = (props) => {\r\n  return (\r\n    <Grid direction=\"row\" className=\"friendship-notif-entry\" container>\r\n      <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <div class=\"friendship-notif-img\"></div>\r\n        <div class=\"friendship-notif-name\" style={{ marginLeft: \"4px\" }}>\r\n          {props.fullName}\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n        <ButtonGroup\r\n          size={\"small\"}\r\n          variant=\"contained\"\r\n          aria-label=\"contained primary button group\"\r\n        >\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={() => {\r\n              frFuncs.handleAcceptFriendship(props.id);\r\n            }}\r\n          >\r\n            Accept\r\n          </Button>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={() => {\r\n              frFuncs.handleRejectFriendship(props.id);\r\n            }}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default FriendshipNotifEntry;\r\n","E:\\sokial\\sokial\\src\\usable functions\\endpoint-related.js",[],"E:\\sokial\\sokial\\src\\components\\postCommentsSection.js",["167"],"import { createRef } from \"react\";\r\nimport { TextField, TextareaAutosize, Button } from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport generalFunctions from \"../usable functions/general\";\r\nimport PostComment from \"./postComment\";\r\nimport { Component } from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nclass PostCommentsSections extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      noMoreComments: false,\r\n      waitingForComments: false,\r\n      firstFetchDone: false,\r\n      fetchedComments: [],\r\n      shownCommentsDivs: [],\r\n    };\r\n\r\n    this.textareaRef = createRef(null);\r\n\r\n    this.numCommentsToFetch = 100; // It's a parameter that can be changed\r\n    this.numCommentsToPush = 15; // It's a parameter that can be changed\r\n\r\n    // This variable is used to prevent making a fetch while\r\n    // haven't get last sent fetch yet. (A problem of scrolling based fetching)\r\n    this.fetching = false;\r\n\r\n    this.handleSendComment = this.handleSendComment.bind(this);\r\n    this.fetchNewComments = this.fetchNewComments.bind(this);\r\n    this.pushToShownComments = this.pushToShownComments.bind(this);\r\n    this.handleWaitingForComments = this.handleWaitingForComments.bind(this);\r\n    this.handleEditComment = this.handleEditComment.bind(this);\r\n    this.handleDeleteComment = this.handleDeleteComment.bind(this);\r\n  }\r\n\r\n  handleSendComment() {\r\n    fetch(`/post/comment/${this.props.postId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify({\r\n        content: this.textareaRef.current.value,\r\n        timestamp: generalFunctions.getTimestamp(),\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n  }\r\n\r\n  handleEditComment(commentIndex, newContent) {\r\n    fetch(`/comment/${this.state.fetchedComments[commentIndex].id}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n      body: JSON.stringify({ newContent: newContent }),\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(\"Failed to edit comment\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n\r\n    let tmpCommentsDivs = [...this.state.shownCommentsDivs];\r\n    tmpCommentsDivs[commentIndex] = (\r\n      <PostComment\r\n        id={this.state.fetchedComments[commentIndex].id}\r\n        commentIndex={commentIndex}\r\n        content={newContent}\r\n        commentAuthor={this.state.fetchedComments[commentIndex].author_user}\r\n        postOwnerData={this.props.postOwnerData}\r\n        identity={this.props.identity}\r\n        handleEditComment={this.handleEditComment}\r\n        handleDeleteComment={this.handleDeleteComment}\r\n      />\r\n    );\r\n    this.setState({ shownCommentsDivs: tmpCommentsDivs });\r\n  }\r\n\r\n  handleDeleteComment(commentIndex) {\r\n    fetch(`/comment/${this.state.fetchedComments[commentIndex].id}`, {\r\n      method: \"DELETE\",\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) throw new Error(\"Failed to delete comment\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n\r\n    let tmpCommentsDivs = [...this.state.shownCommentsDivs];\r\n    tmpCommentsDivs[commentIndex] = null;\r\n    this.setState({ shownCommentsDivs: tmpCommentsDivs });\r\n  }\r\n\r\n  /*  toggleReaction(postIndex, newReactionType) {\r\n    let tmpCommentsDivs = [...this.state.shownCommentsDivs];\r\n    tmpCommentsDivs[postIndex] = (\r\n      <Post\r\n        id={this.state.fetchedComments[postIndex].id}\r\n        postIndex={postIndex}\r\n        myReactionType={newReactionType}\r\n        content={this.state.fetchedComments[postIndex].content}\r\n        autherFullName={`${this.props.profileData.firstName} ${this.props.profileData.lastName}`}\r\n        toggleReaction={this.toggleReaction}\r\n      />\r\n    );\r\n    this.setState({ shownCommentsDivs: tmpCommentsDivs });\r\n  }\r\n*/\r\n\r\n  handleWaitingForComments() {\r\n    this.setState({ waitingForComments: true });\r\n\r\n    if (\r\n      this.state.fetchedComments.length === this.state.shownCommentsDivs.length\r\n    ) {\r\n      // Need to fetch new comments\r\n      this.fetchNewComments().then((comments) => {\r\n        //console.log(\"Fetched comments >> \", comments);\r\n        if (comments.length === 0) {\r\n          this.setState({ noMoreComments: true });\r\n        } else {\r\n          this.setState({\r\n            fetchedComments: this.state.fetchedComments.concat(comments),\r\n          });\r\n          this.pushToShownComments();\r\n        }\r\n      });\r\n    } else {\r\n      this.pushToShownComments();\r\n    }\r\n\r\n    this.fetching = false;\r\n    this.setState({ waitingForComments: false });\r\n  }\r\n\r\n  fetchNewComments() {\r\n    const escapeComments = this.state.fetchedComments.length;\r\n    const limitComments = this.numCommentsToFetch;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\r\n        `/get-comments/${this.props.postId}?` +\r\n          new URLSearchParams({\r\n            esc: escapeComments,\r\n            limit: limitComments,\r\n          }),\r\n        {\r\n          method: \"GET\",\r\n        }\r\n      )\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((res) => {\r\n          if (!res.valid) {\r\n            // TODO :: Handle invalid fetch\r\n          } else {\r\n            // console.log(res.comments.length);\r\n            return resolve(res.comments);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  pushToShownComments() {\r\n    const tmpCommentsDivs = [];\r\n\r\n    let toPushLeft = this.state.shownCommentsDivs.length;\r\n    let toPushRight = Math.min(\r\n      toPushLeft + this.numCommentsToPush,\r\n      this.state.fetchedComments.length\r\n    );\r\n\r\n    for (let i = toPushLeft; i < toPushRight; i++) {\r\n      console.log(this.state.fetchedComments[i].author_user);\r\n      tmpCommentsDivs.push(\r\n        <PostComment\r\n          id={this.state.fetchedComments[i].id}\r\n          commentIndex={tmpCommentsDivs.length}\r\n          content={this.state.fetchedComments[i].content}\r\n          commentAuthor={this.state.fetchedComments[i].author_user}\r\n          postOwnerData={this.props.postOwnerData}\r\n          identity={this.props.identity}\r\n          handleEditComment={this.handleEditComment}\r\n          handleDeleteComment={this.handleDeleteComment}\r\n        />\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      shownCommentsDivs: this.state.shownCommentsDivs.concat(tmpCommentsDivs),\r\n      firstFetchDone: true,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleWaitingForComments();\r\n  }\r\n\r\n  render() {\r\n    let endDiv = null;\r\n    if (this.state.noMoreComments === false && this.state.waitingForComments)\r\n      endDiv = (\r\n        <div id=\"comments-profile-section-loading-div\">\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    else if (this.state.noMoreComments === false) {\r\n      endDiv = (\r\n        <div>\r\n          <Button\r\n            style={{ width: \"100%\" }}\r\n            onClick={this.handleWaitingForComments}\r\n          >\r\n            Load more...\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!this.props.openCommentsSection) return null;\r\n    else\r\n      return (\r\n        <div>\r\n          <div className=\"post-comments-section\">\r\n            <div class=\"post-commenting-section\">\r\n              <TextareaAutosize\r\n                rowsMin={2}\r\n                rowsMax={8}\r\n                ref={this.textareaRef}\r\n                style={{\r\n                  width: \"100%\",\r\n                  resize: \"none\",\r\n                  overflow: \"auto\",\r\n                  outlineStyle: \"none\",\r\n                  //borderStyle: \"none\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              />\r\n              <div style={{ width: \"10%\", position: \"relative\" }}>\r\n                <Button\r\n                  id=\"post-comment-send-btn\"\r\n                  style={{ width: \"10px\", backgroundColor: \"transparent\" }}\r\n                  onClick={this.handleSendComment}\r\n                  startIcon={<SendIcon />}\r\n                />\r\n              </div>\r\n            </div>\r\n            {this.state.shownCommentsDivs}\r\n          </div>\r\n          {endDiv}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default PostCommentsSections;\r\n","E:\\sokial\\sokial\\src\\usable functions\\general.js",[],"E:\\sokial\\sokial\\src\\components\\postComment.js",[],"E:\\sokial\\sokial\\src\\components\\postEditing.js",["168","169"],"import {\r\n  TextareaAutosize,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\nimport generalFunctions from \"../usable functions/general\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nconst PostEditing = (props) => {\r\n  const [disablePosting, setDisablePosting] = useState(true);\r\n  const [disableWriting, setDisableWriting] = useState(false);\r\n  const textareaRef = useRef(null);\r\n\r\n  const handleClosePostingDialog = () => {\r\n    props.setEditingPost(false);\r\n  };\r\n\r\n  const handleClickSave = () => {\r\n    setDisablePosting(true);\r\n    setDisableWriting(false);\r\n    props.handleEditPost(props.postIndex, textareaRef.current.value);\r\n    handleClosePostingDialog();\r\n  };\r\n\r\n  if (!props.postContentRef.current) return null;\r\n  return (\r\n    <Dialog open={props.editingPost} onClose={handleClosePostingDialog}>\r\n      <DialogTitle style={{ textAlign: \"center\" }}>Post Editing</DialogTitle>\r\n      <DialogContent\r\n        style={{ width: \"400px\", height: \"200px\", padding: \"8px 0px\" }}\r\n      >\r\n        <TextareaAutosize\r\n          ref={textareaRef}\r\n          rowsMin={3}\r\n          rowsMax={8}\r\n          autoFocus\r\n          disabled={disableWriting}\r\n          defaultValue={String(\r\n            props.postContentRef.current.firstChild.textContent\r\n          )}\r\n          placeholder=\"What's on your mind?\"\r\n          onInput={() => {\r\n            if (textareaRef.current.value.trim() == \"\") {\r\n              setDisablePosting(true);\r\n            } else if (disablePosting) setDisablePosting(false);\r\n          }}\r\n          style={{\r\n            width: \"100%\",\r\n            outlineStyle: \"none\",\r\n            borderStyle: \"none\",\r\n            resize: \"none\",\r\n          }}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClickSave} disabled={disablePosting}>\r\n          Save\r\n        </Button>\r\n        <Button onClick={handleClosePostingDialog}>Cancel</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default PostEditing;\r\n","E:\\sokial\\sokial\\src\\components\\home.js",["170","171"],"import { useState, useEffect } from \"react\";\r\nimport PostsHomeSection from \"./postsHomeSection\";\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <div>\r\n      <h1>HOME</h1>\r\n      <PostsHomeSection identity={props.identity} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","E:\\sokial\\sokial\\src\\components\\postsHomeSection.js",[],"E:\\sokial\\sokial\\src\\components\\profileImg.js",["172","173","174","175","176","177","178","179"],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":4,"column":10,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"188","line":6,"column":8,"nodeType":"186","messageId":"187","endLine":6,"endColumn":15},{"ruleId":"184","severity":1,"message":"189","line":7,"column":8,"nodeType":"186","messageId":"187","endLine":7,"endColumn":12},{"ruleId":"184","severity":1,"message":"190","line":10,"column":10,"nodeType":"186","messageId":"187","endLine":10,"endColumn":18},{"ruleId":"184","severity":1,"message":"191","line":13,"column":3,"nodeType":"186","messageId":"187","endLine":13,"endColumn":9},{"ruleId":"184","severity":1,"message":"192","line":14,"column":3,"nodeType":"186","messageId":"187","endLine":14,"endColumn":10},{"ruleId":"184","severity":1,"message":"193","line":15,"column":3,"nodeType":"186","messageId":"187","endLine":15,"endColumn":13},{"ruleId":"184","severity":1,"message":"194","line":16,"column":3,"nodeType":"186","messageId":"187","endLine":16,"endColumn":13},{"ruleId":"184","severity":1,"message":"195","line":17,"column":3,"nodeType":"186","messageId":"187","endLine":17,"endColumn":9},{"ruleId":"196","severity":1,"message":"197","line":51,"column":34,"nodeType":"198","messageId":"199","endLine":51,"endColumn":36},{"ruleId":"196","severity":1,"message":"197","line":52,"column":34,"nodeType":"198","messageId":"199","endLine":52,"endColumn":36},{"ruleId":"196","severity":1,"message":"197","line":57,"column":36,"nodeType":"198","messageId":"199","endLine":57,"endColumn":38},{"ruleId":"180","replacedBy":"200"},{"ruleId":"182","replacedBy":"201"},{"ruleId":"184","severity":1,"message":"190","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":18},{"ruleId":"184","severity":1,"message":"202","line":1,"column":20,"nodeType":"186","messageId":"187","endLine":1,"endColumn":26},{"ruleId":"184","severity":1,"message":"202","line":1,"column":20,"nodeType":"186","messageId":"187","endLine":1,"endColumn":26},{"ruleId":"184","severity":1,"message":"203","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":19},{"ruleId":"184","severity":1,"message":"204","line":1,"column":21,"nodeType":"186","messageId":"187","endLine":1,"endColumn":37},{"ruleId":"184","severity":1,"message":"195","line":1,"column":45,"nodeType":"186","messageId":"187","endLine":1,"endColumn":51},{"ruleId":"205","severity":1,"message":"206","line":45,"column":6,"nodeType":"207","endLine":45,"endColumn":24,"suggestions":"208"},{"ruleId":"205","severity":1,"message":"209","line":45,"column":7,"nodeType":"210","endLine":45,"endColumn":23},{"ruleId":"196","severity":1,"message":"197","line":47,"column":40,"nodeType":"198","messageId":"199","endLine":47,"endColumn":42},{"ruleId":"196","severity":1,"message":"197","line":75,"column":52,"nodeType":"198","messageId":"199","endLine":75,"endColumn":54},{"ruleId":"184","severity":1,"message":"203","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":19},{"ruleId":"184","severity":1,"message":"204","line":1,"column":21,"nodeType":"186","messageId":"187","endLine":1,"endColumn":37},{"ruleId":"196","severity":1,"message":"197","line":57,"column":32,"nodeType":"198","messageId":"199","endLine":57,"endColumn":34},{"ruleId":"184","severity":1,"message":"202","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":16},{"ruleId":"184","severity":1,"message":"203","line":3,"column":3,"nodeType":"186","messageId":"187","endLine":3,"endColumn":12},{"ruleId":"184","severity":1,"message":"204","line":4,"column":3,"nodeType":"186","messageId":"187","endLine":4,"endColumn":19},{"ruleId":"184","severity":1,"message":"211","line":5,"column":3,"nodeType":"186","messageId":"187","endLine":5,"endColumn":7},{"ruleId":"184","severity":1,"message":"193","line":7,"column":3,"nodeType":"186","messageId":"187","endLine":7,"endColumn":13},{"ruleId":"212","severity":1,"message":"213","line":72,"column":9,"nodeType":"214","endLine":72,"endColumn":40},{"ruleId":"184","severity":1,"message":"215","line":9,"column":10,"nodeType":"186","messageId":"187","endLine":9,"endColumn":15},{"ruleId":"184","severity":1,"message":"191","line":3,"column":3,"nodeType":"186","messageId":"187","endLine":3,"endColumn":9},{"ruleId":"184","severity":1,"message":"192","line":4,"column":3,"nodeType":"186","messageId":"187","endLine":4,"endColumn":10},{"ruleId":"184","severity":1,"message":"194","line":6,"column":3,"nodeType":"186","messageId":"187","endLine":6,"endColumn":13},{"ruleId":"184","severity":1,"message":"195","line":7,"column":3,"nodeType":"186","messageId":"187","endLine":7,"endColumn":9},{"ruleId":"184","severity":1,"message":"216","line":12,"column":8,"nodeType":"186","messageId":"187","endLine":12,"endColumn":25},{"ruleId":"184","severity":1,"message":"217","line":15,"column":7,"nodeType":"186","messageId":"187","endLine":15,"endColumn":36},{"ruleId":"184","severity":1,"message":"218","line":16,"column":16,"nodeType":"186","messageId":"187","endLine":16,"endColumn":23},{"ruleId":"219","severity":2,"message":"220","line":31,"column":16,"nodeType":"186","messageId":"221","endLine":31,"endColumn":45},{"ruleId":"184","severity":1,"message":"203","line":3,"column":3,"nodeType":"186","messageId":"187","endLine":3,"endColumn":12},{"ruleId":"184","severity":1,"message":"204","line":4,"column":3,"nodeType":"186","messageId":"187","endLine":4,"endColumn":19},{"ruleId":"184","severity":1,"message":"211","line":5,"column":3,"nodeType":"186","messageId":"187","endLine":5,"endColumn":7},{"ruleId":"184","severity":1,"message":"222","line":10,"column":3,"nodeType":"186","messageId":"187","endLine":10,"endColumn":16},{"ruleId":"184","severity":1,"message":"223","line":15,"column":8,"nodeType":"186","messageId":"187","endLine":15,"endColumn":30},{"ruleId":"184","severity":1,"message":"216","line":16,"column":8,"nodeType":"186","messageId":"187","endLine":16,"endColumn":25},{"ruleId":"184","severity":1,"message":"203","line":2,"column":3,"nodeType":"186","messageId":"187","endLine":2,"endColumn":12},{"ruleId":"184","severity":1,"message":"204","line":3,"column":3,"nodeType":"186","messageId":"187","endLine":3,"endColumn":19},{"ruleId":"184","severity":1,"message":"211","line":4,"column":3,"nodeType":"186","messageId":"187","endLine":4,"endColumn":7},{"ruleId":"184","severity":1,"message":"195","line":5,"column":3,"nodeType":"186","messageId":"187","endLine":5,"endColumn":9},{"ruleId":"184","severity":1,"message":"224","line":6,"column":3,"nodeType":"186","messageId":"187","endLine":6,"endColumn":9},{"ruleId":"184","severity":1,"message":"225","line":7,"column":3,"nodeType":"186","messageId":"187","endLine":7,"endColumn":14},{"ruleId":"184","severity":1,"message":"226","line":8,"column":3,"nodeType":"186","messageId":"187","endLine":8,"endColumn":16},{"ruleId":"184","severity":1,"message":"222","line":9,"column":3,"nodeType":"186","messageId":"187","endLine":9,"endColumn":16},{"ruleId":"184","severity":1,"message":"227","line":1,"column":37,"nodeType":"186","messageId":"187","endLine":1,"endColumn":46},{"ruleId":"184","severity":1,"message":"203","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":19},{"ruleId":"184","severity":1,"message":"228","line":9,"column":8,"nodeType":"186","messageId":"187","endLine":9,"endColumn":24},{"ruleId":"196","severity":1,"message":"197","line":46,"column":50,"nodeType":"198","messageId":"199","endLine":46,"endColumn":52},{"ruleId":"184","severity":1,"message":"190","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":18},{"ruleId":"184","severity":1,"message":"229","line":1,"column":20,"nodeType":"186","messageId":"187","endLine":1,"endColumn":29},{"ruleId":"184","severity":1,"message":"203","line":3,"column":3,"nodeType":"186","messageId":"187","endLine":3,"endColumn":12},{"ruleId":"184","severity":1,"message":"204","line":4,"column":3,"nodeType":"186","messageId":"187","endLine":4,"endColumn":19},{"ruleId":"184","severity":1,"message":"211","line":5,"column":3,"nodeType":"186","messageId":"187","endLine":5,"endColumn":7},{"ruleId":"184","severity":1,"message":"195","line":6,"column":3,"nodeType":"186","messageId":"187","endLine":6,"endColumn":9},{"ruleId":"184","severity":1,"message":"230","line":9,"column":8,"nodeType":"186","messageId":"187","endLine":9,"endColumn":21},{"ruleId":"184","severity":1,"message":"231","line":10,"column":8,"nodeType":"186","messageId":"187","endLine":10,"endColumn":24},{"ruleId":"184","severity":1,"message":"232","line":14,"column":10,"nodeType":"186","messageId":"187","endLine":14,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":92,"column":9,"nodeType":"235","endLine":92,"endColumn":54},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Posting' is defined but never used.","'Post' is defined but never used.","'useState' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["236"],["237"],"'useRef' is defined but never used.","'TextField' is defined but never used.","'TextareaAutosize' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isMyProfile' and 'params'. Either include them or remove the dependency array.","ArrayExpression",["238"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'Grid' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Badge' is defined but never used.","'NotificationsIcon' is defined but never used.","'FriendshipNotificationsButton' is assigned a value but never used.","'setOpen' is assigned a value but never used.","no-undef","'friendshipNotificationsButton' is not defined.","undef","'DialogActions' is defined but never used.","'NotificationsContainer' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'Container' is defined but never used.","'generalFunctions' is defined but never used.","'useEffect' is defined but never used.","'AddCircleIcon' is defined but never used.","'RemoveCircleIcon' is defined but never used.","'friendshipRelatedFunctions' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"239","fix":"240"},"Update the dependencies array to be: [isMyProfile, params]",{"range":"241","text":"242"},[1333,1351],"[isMyProfile, params]"]